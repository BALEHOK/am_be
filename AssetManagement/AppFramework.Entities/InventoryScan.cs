//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(InventoryScanItem))]
    public partial class InventoryScan: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long InventoryScanUid
        {
            get { return _inventoryScanUid; }
            set
            {
                if (_inventoryScanUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'InventoryScanUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _inventoryScanUid = value;
                    OnPropertyChanged("InventoryScanUid");
                }
            }
        }
        private long _inventoryScanUid;
    
        [DataMember]
        public long UserDynEntityId
        {
            get { return _userDynEntityId; }
            set
            {
                if (_userDynEntityId != value)
                {
                    _userDynEntityId = value;
                    OnPropertyChanged("UserDynEntityId");
                }
            }
        }
        private long _userDynEntityId;
    
        [DataMember]
        public bool OfflineScan
        {
            get { return _offlineScan; }
            set
            {
                if (_offlineScan != value)
                {
                    _offlineScan = value;
                    OnPropertyChanged("OfflineScan");
                }
            }
        }
        private bool _offlineScan;
    
        [DataMember]
        public Nullable<System.DateTime> DateDataDownload
        {
            get { return _dateDataDownload; }
            set
            {
                if (_dateDataDownload != value)
                {
                    _dateDataDownload = value;
                    OnPropertyChanged("DateDataDownload");
                }
            }
        }
        private Nullable<System.DateTime> _dateDataDownload;
    
        [DataMember]
        public Nullable<System.DateTime> DateDataUpload
        {
            get { return _dateDataUpload; }
            set
            {
                if (_dateDataUpload != value)
                {
                    _dateDataUpload = value;
                    OnPropertyChanged("DateDataUpload");
                }
            }
        }
        private Nullable<System.DateTime> _dateDataUpload;
    
        [DataMember]
        public Nullable<System.DateTime> DateFirstScan
        {
            get { return _dateFirstScan; }
            set
            {
                if (_dateFirstScan != value)
                {
                    _dateFirstScan = value;
                    OnPropertyChanged("DateFirstScan");
                }
            }
        }
        private Nullable<System.DateTime> _dateFirstScan;
    
        [DataMember]
        public Nullable<System.DateTime> DateLastScan
        {
            get { return _dateLastScan; }
            set
            {
                if (_dateLastScan != value)
                {
                    _dateLastScan = value;
                    OnPropertyChanged("DateLastScan");
                }
            }
        }
        private Nullable<System.DateTime> _dateLastScan;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public Nullable<decimal> NumberItemsScaned
        {
            get { return _numberItemsScaned; }
            set
            {
                if (_numberItemsScaned != value)
                {
                    _numberItemsScaned = value;
                    OnPropertyChanged("NumberItemsScaned");
                }
            }
        }
        private Nullable<decimal> _numberItemsScaned;
    
        [DataMember]
        public Nullable<decimal> NumberFailed
        {
            get { return _numberFailed; }
            set
            {
                if (_numberFailed != value)
                {
                    _numberFailed = value;
                    OnPropertyChanged("NumberFailed");
                }
            }
        }
        private Nullable<decimal> _numberFailed;
    
        [DataMember]
        public long UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private long _userId;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<InventoryScanItem> InventoryScanItem
        {
            get
            {
                if (_inventoryScanItem == null)
                {
                    _inventoryScanItem = new TrackableCollection<InventoryScanItem>();
                    _inventoryScanItem.CollectionChanged += FixupInventoryScanItem;
    				_inventoryScanItem.IsLoaded = false;
                }
                return _inventoryScanItem;
            }
            set
            {
                if (!ReferenceEquals(_inventoryScanItem, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_inventoryScanItem != null)
                    {
                        _inventoryScanItem.CollectionChanged -= FixupInventoryScanItem;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (InventoryScanItem item in _inventoryScanItem)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _inventoryScanItem = value;
    				_inventoryScanItem.IsLoaded = true;
                    if (_inventoryScanItem != null)
                    {
                        _inventoryScanItem.CollectionChanged += FixupInventoryScanItem;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (InventoryScanItem item in _inventoryScanItem)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("InventoryScanItem");
                }
            }
        }
        private TrackableCollection<InventoryScanItem> _inventoryScanItem;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            InventoryScanItem.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupInventoryScanItem(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (InventoryScanItem item in e.NewItems)
                {
                    item.InventoryScan = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("InventoryScanItem", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (InventoryScanItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.InventoryScan, this))
                    {
                        item.InventoryScan = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("InventoryScanItem", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
