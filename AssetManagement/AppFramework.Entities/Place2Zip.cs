//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Place))]
    [KnownType(typeof(ZipCode))]
    public partial class Place2Zip: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long RelId
        {
            get { return _relId; }
            set
            {
                if (_relId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'RelId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _relId = value;
                    OnPropertyChanged("RelId");
                }
            }
        }
        private long _relId;
    
        [DataMember]
        public long PlaceId
        {
            get { return _placeId; }
            set
            {
                if (_placeId != value)
                {
                    ChangeTracker.RecordOriginalValue("PlaceId", _placeId);
                    if (!IsDeserializing)
                    {
                        if (Place != null && Place.PlaceId != value)
                        {
                            Place = null;
                        }
                    }
                    _placeId = value;
                    OnPropertyChanged("PlaceId");
                }
            }
        }
        private long _placeId;
    
        [DataMember]
        public long ZipId
        {
            get { return _zipId; }
            set
            {
                if (_zipId != value)
                {
                    ChangeTracker.RecordOriginalValue("ZipId", _zipId);
                    if (!IsDeserializing)
                    {
                        if (ZipCode != null && ZipCode.ZipId != value)
                        {
                            ZipCode = null;
                        }
                    }
                    _zipId = value;
                    OnPropertyChanged("ZipId");
                }
            }
        }
        private long _zipId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Place Place
        {
            get { return _place; }
            set
            {
                if (!ReferenceEquals(_place, value))
                {
                    var previousValue = _place;
                    _place = value;
                    FixupPlace(previousValue);
                    OnNavigationPropertyChanged("Place");
                }
            }
        }
        private Place _place;
    
        [DataMember]
        public ZipCode ZipCode
        {
            get { return _zipCode; }
            set
            {
                if (!ReferenceEquals(_zipCode, value))
                {
                    var previousValue = _zipCode;
                    _zipCode = value;
                    FixupZipCode(previousValue);
                    OnNavigationPropertyChanged("ZipCode");
                }
            }
        }
        private ZipCode _zipCode;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Place = null;
            ZipCode = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupPlace(Place previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Place2Zip.Contains(this))
            {
                previousValue.Place2Zip.Remove(this);
            }
    
            if (Place != null)
            {
                if (!Place.Place2Zip.Contains(this))
                {
                    Place.Place2Zip.Add(this);
                }
    
                PlaceId = Place.PlaceId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Place")
                    && (ChangeTracker.OriginalValues["Place"] == Place))
                {
                    ChangeTracker.OriginalValues.Remove("Place");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Place", previousValue);
                }
                if (Place != null && !Place.ChangeTracker.ChangeTrackingEnabled)
                {
                    Place.StartTracking();
                }
            }
        }
    
        private void FixupZipCode(ZipCode previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Place2Zip.Contains(this))
            {
                previousValue.Place2Zip.Remove(this);
            }
    
            if (ZipCode != null)
            {
                if (!ZipCode.Place2Zip.Contains(this))
                {
                    ZipCode.Place2Zip.Add(this);
                }
    
                ZipId = ZipCode.ZipId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ZipCode")
                    && (ChangeTracker.OriginalValues["ZipCode"] == ZipCode))
                {
                    ChangeTracker.OriginalValues.Remove("ZipCode");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ZipCode", previousValue);
                }
                if (ZipCode != null && !ZipCode.ChangeTracker.ChangeTrackingEnabled)
                {
                    ZipCode.StartTracking();
                }
            }
        }

        #endregion

    }
}
