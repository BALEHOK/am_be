//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TaxonomyItem))]
    public partial class Taxonomy: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long TaxonomyUid
        {
            get { return _taxonomyUid; }
            set
            {
                if (_taxonomyUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaxonomyUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taxonomyUid = value;
                    OnPropertyChanged("TaxonomyUid");
                }
            }
        }
        private long _taxonomyUid;
    
        [DataMember]
        public int TaxonomyId
        {
            get { return _taxonomyId; }
            set
            {
                if (_taxonomyId != value)
                {
                    _taxonomyId = value;
                    OnPropertyChanged("TaxonomyId");
                }
            }
        }
        private int _taxonomyId;
    
        [DataMember]
        public int Revision
        {
            get { return _revision; }
            set
            {
                if (_revision != value)
                {
                    _revision = value;
                    OnPropertyChanged("Revision");
                }
            }
        }
        private int _revision;
    
        [DataMember]
        public bool ActiveVersion
        {
            get { return _activeVersion; }
            set
            {
                if (_activeVersion != value)
                {
                    _activeVersion = value;
                    OnPropertyChanged("ActiveVersion");
                }
            }
        }
        private bool _activeVersion;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string NameTranslationId
        {
            get { return _nameTranslationId; }
            set
            {
                if (_nameTranslationId != value)
                {
                    _nameTranslationId = value;
                    OnPropertyChanged("NameTranslationId");
                }
            }
        }
        private string _nameTranslationId;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsCategory
        {
            get { return _isCategory; }
            set
            {
                if (_isCategory != value)
                {
                    _isCategory = value;
                    OnPropertyChanged("IsCategory");
                }
            }
        }
        private bool _isCategory;
    
        [DataMember]
        public bool IsDraft
        {
            get { return _isDraft; }
            set
            {
                if (_isDraft != value)
                {
                    _isDraft = value;
                    OnPropertyChanged("IsDraft");
                }
            }
        }
        private bool _isDraft;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<TaxonomyItem> TaxonomyItem
        {
            get
            {
                if (_taxonomyItem == null)
                {
                    _taxonomyItem = new TrackableCollection<TaxonomyItem>();
                    _taxonomyItem.CollectionChanged += FixupTaxonomyItem;
    				_taxonomyItem.IsLoaded = false;
                }
                return _taxonomyItem;
            }
            set
            {
                if (!ReferenceEquals(_taxonomyItem, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_taxonomyItem != null)
                    {
                        _taxonomyItem.CollectionChanged -= FixupTaxonomyItem;
                    }
                    _taxonomyItem = value;
    				_taxonomyItem.IsLoaded = true;
                    if (_taxonomyItem != null)
                    {
                        _taxonomyItem.CollectionChanged += FixupTaxonomyItem;
                    }
                    OnNavigationPropertyChanged("TaxonomyItem");
                }
            }
        }
        private TrackableCollection<TaxonomyItem> _taxonomyItem;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TaxonomyItem.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupTaxonomyItem(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaxonomyItem item in e.NewItems)
                {
                    item.Taxonomy = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("TaxonomyItem", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaxonomyItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.Taxonomy, this))
                    {
                        item.Taxonomy = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("TaxonomyItem", item);
                    }
                }
            }
        }

        #endregion

    }
}
