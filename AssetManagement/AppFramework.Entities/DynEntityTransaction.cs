//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(TransactionType))]
    public partial class DynEntityTransaction: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long DynEntityTransactionUid
        {
            get { return _dynEntityTransactionUid; }
            set
            {
                if (_dynEntityTransactionUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DynEntityTransactionUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dynEntityTransactionUid = value;
                    OnPropertyChanged("DynEntityTransactionUid");
                }
            }
        }
        private long _dynEntityTransactionUid;
    
        [DataMember]
        public long DynEntityId
        {
            get { return _dynEntityId; }
            set
            {
                if (_dynEntityId != value)
                {
                    _dynEntityId = value;
                    OnPropertyChanged("DynEntityId");
                }
            }
        }
        private long _dynEntityId;
    
        [DataMember]
        public long TransactionTypeUid
        {
            get { return _transactionTypeUid; }
            set
            {
                if (_transactionTypeUid != value)
                {
                    ChangeTracker.RecordOriginalValue("TransactionTypeUid", _transactionTypeUid);
                    if (!IsDeserializing)
                    {
                        if (TransactionType != null && TransactionType.TransactionTypeUid != value)
                        {
                            TransactionType = null;
                        }
                    }
                    _transactionTypeUid = value;
                    OnPropertyChanged("TransactionTypeUid");
                }
            }
        }
        private long _transactionTypeUid;
    
        [DataMember]
        public decimal StockCount
        {
            get { return _stockCount; }
            set
            {
                if (_stockCount != value)
                {
                    _stockCount = value;
                    OnPropertyChanged("StockCount");
                }
            }
        }
        private decimal _stockCount;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public System.DateTime TransactionDate
        {
            get { return _transactionDate; }
            set
            {
                if (_transactionDate != value)
                {
                    _transactionDate = value;
                    OnPropertyChanged("TransactionDate");
                }
            }
        }
        private System.DateTime _transactionDate;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public decimal StockPrice
        {
            get { return _stockPrice; }
            set
            {
                if (_stockPrice != value)
                {
                    _stockPrice = value;
                    OnPropertyChanged("StockPrice");
                }
            }
        }
        private decimal _stockPrice;
    
        [DataMember]
        public long DynEntityConfigId
        {
            get { return _dynEntityConfigId; }
            set
            {
                if (_dynEntityConfigId != value)
                {
                    _dynEntityConfigId = value;
                    OnPropertyChanged("DynEntityConfigId");
                }
            }
        }
        private long _dynEntityConfigId;
    
        [DataMember]
        public Nullable<long> RefTransactionUid
        {
            get { return _refTransactionUid; }
            set
            {
                if (_refTransactionUid != value)
                {
                    _refTransactionUid = value;
                    OnPropertyChanged("RefTransactionUid");
                }
            }
        }
        private Nullable<long> _refTransactionUid;
    
        [DataMember]
        public Nullable<System.DateTime> CloseDate
        {
            get { return _closeDate; }
            set
            {
                if (_closeDate != value)
                {
                    _closeDate = value;
                    OnPropertyChanged("CloseDate");
                }
            }
        }
        private Nullable<System.DateTime> _closeDate;
    
        [DataMember]
        public decimal RestCount
        {
            get { return _restCount; }
            set
            {
                if (_restCount != value)
                {
                    _restCount = value;
                    OnPropertyChanged("RestCount");
                }
            }
        }
        private decimal _restCount;
    
        [DataMember]
        public Nullable<long> LocationId
        {
            get { return _locationId; }
            set
            {
                if (_locationId != value)
                {
                    _locationId = value;
                    OnPropertyChanged("LocationId");
                }
            }
        }
        private Nullable<long> _locationId;
    
        [DataMember]
        public Nullable<long> EndUserId
        {
            get { return _endUserId; }
            set
            {
                if (_endUserId != value)
                {
                    _endUserId = value;
                    OnPropertyChanged("EndUserId");
                }
            }
        }
        private Nullable<long> _endUserId;
    
        [DataMember]
        public Nullable<long> FromLocationId
        {
            get { return _fromLocationId; }
            set
            {
                if (_fromLocationId != value)
                {
                    _fromLocationId = value;
                    OnPropertyChanged("FromLocationId");
                }
            }
        }
        private Nullable<long> _fromLocationId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TransactionType TransactionType
        {
            get { return _transactionType; }
            set
            {
                if (!ReferenceEquals(_transactionType, value))
                {
                    var previousValue = _transactionType;
                    _transactionType = value;
                    FixupTransactionType(previousValue);
                    OnNavigationPropertyChanged("TransactionType");
                }
            }
        }
        private TransactionType _transactionType;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            TransactionType = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTransactionType(TransactionType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynEntityTransactions.Contains(this))
            {
                previousValue.DynEntityTransactions.Remove(this);
            }
    
            if (TransactionType != null)
            {
                if (!TransactionType.DynEntityTransactions.Contains(this))
                {
                    TransactionType.DynEntityTransactions.Add(this);
                }
    
                TransactionTypeUid = TransactionType.TransactionTypeUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("TransactionType")
                    && (ChangeTracker.OriginalValues["TransactionType"] == TransactionType))
                {
                    ChangeTracker.OriginalValues.Remove("TransactionType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("TransactionType", previousValue);
                }
                if (TransactionType != null && !TransactionType.ChangeTracker.ChangeTrackingEnabled)
                {
                    TransactionType.StartTracking();
                }
            }
        }

        #endregion

    }
}
