//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DynEntityContextAttributesValues))]
    [KnownType(typeof(DynList))]
    public partial class DynListItem: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long DynListItemUid
        {
            get { return _dynListItemUid; }
            set
            {
                if (_dynListItemUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DynListItemUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dynListItemUid = value;
                    OnPropertyChanged("DynListItemUid");
                }
            }
        }
        private long _dynListItemUid;
    
        [DataMember]
        public long DynListItemId
        {
            get { return _dynListItemId; }
            set
            {
                if (_dynListItemId != value)
                {
                    _dynListItemId = value;
                    OnPropertyChanged("DynListItemId");
                }
            }
        }
        private long _dynListItemId;
    
        [DataMember]
        public int Revision
        {
            get { return _revision; }
            set
            {
                if (_revision != value)
                {
                    _revision = value;
                    OnPropertyChanged("Revision");
                }
            }
        }
        private int _revision;
    
        [DataMember]
        public long DynListUid
        {
            get { return _dynListUid; }
            set
            {
                if (_dynListUid != value)
                {
                    ChangeTracker.RecordOriginalValue("DynListUid", _dynListUid);
                    if (!IsDeserializing)
                    {
                        if (DynList != null && DynList.DynListUid != value)
                        {
                            DynList = null;
                        }
                    }
                    _dynListUid = value;
                    OnPropertyChanged("DynListUid");
                }
            }
        }
        private long _dynListUid;
    
        [DataMember]
        public bool ActiveVersion
        {
            get { return _activeVersion; }
            set
            {
                if (_activeVersion != value)
                {
                    _activeVersion = value;
                    OnPropertyChanged("ActiveVersion");
                }
            }
        }
        private bool _activeVersion;
    
        [DataMember]
        public int DisplayOrder
        {
            get { return _displayOrder; }
            set
            {
                if (_displayOrder != value)
                {
                    _displayOrder = value;
                    OnPropertyChanged("DisplayOrder");
                }
            }
        }
        private int _displayOrder;
    
        [DataMember]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    OnPropertyChanged("Value");
                }
            }
        }
        private string _value;
    
        [DataMember]
        public string ValueTranslationId
        {
            get { return _valueTranslationId; }
            set
            {
                if (_valueTranslationId != value)
                {
                    _valueTranslationId = value;
                    OnPropertyChanged("ValueTranslationId");
                }
            }
        }
        private string _valueTranslationId;
    
        [DataMember]
        public Nullable<long> AssociatedDynListUid
        {
            get { return _associatedDynListUid; }
            set
            {
                if (_associatedDynListUid != value)
                {
                    ChangeTracker.RecordOriginalValue("AssociatedDynListUid", _associatedDynListUid);
                    if (!IsDeserializing)
                    {
                        if (AssociatedDynList != null && AssociatedDynList.DynListUid != value)
                        {
                            AssociatedDynList = null;
                        }
                    }
                    _associatedDynListUid = value;
                    OnPropertyChanged("AssociatedDynListUid");
                }
            }
        }
        private Nullable<long> _associatedDynListUid;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<DynEntityContextAttributesValues> DynEntityContextAttributesValues
        {
            get
            {
                if (_dynEntityContextAttributesValues == null)
                {
                    _dynEntityContextAttributesValues = new TrackableCollection<DynEntityContextAttributesValues>();
                    _dynEntityContextAttributesValues.CollectionChanged += FixupDynEntityContextAttributesValues;
    				_dynEntityContextAttributesValues.IsLoaded = false;
                }
                return _dynEntityContextAttributesValues;
            }
            set
            {
                if (!ReferenceEquals(_dynEntityContextAttributesValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynEntityContextAttributesValues != null)
                    {
                        _dynEntityContextAttributesValues.CollectionChanged -= FixupDynEntityContextAttributesValues;
                    }
                    _dynEntityContextAttributesValues = value;
    				_dynEntityContextAttributesValues.IsLoaded = true;
                    if (_dynEntityContextAttributesValues != null)
                    {
                        _dynEntityContextAttributesValues.CollectionChanged += FixupDynEntityContextAttributesValues;
                    }
                    OnNavigationPropertyChanged("DynEntityContextAttributesValues");
                }
            }
        }
        private TrackableCollection<DynEntityContextAttributesValues> _dynEntityContextAttributesValues;
    
        [DataMember]
        public DynList DynList
        {
            get { return _dynList; }
            set
            {
                if (!ReferenceEquals(_dynList, value))
                {
                    var previousValue = _dynList;
                    _dynList = value;
                    FixupDynList(previousValue);
                    OnNavigationPropertyChanged("DynList");
                }
            }
        }
        private DynList _dynList;
    
        [DataMember]
        public DynList AssociatedDynList
        {
            get { return _associatedDynList; }
            set
            {
                if (!ReferenceEquals(_associatedDynList, value))
                {
                    var previousValue = _associatedDynList;
                    _associatedDynList = value;
                    FixupAssociatedDynList(previousValue);
                    OnNavigationPropertyChanged("AssociatedDynList");
                }
            }
        }
        private DynList _associatedDynList;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DynEntityContextAttributesValues.Clear();
            DynList = null;
            AssociatedDynList = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupDynList(DynList previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynListItems.Contains(this))
            {
                previousValue.DynListItems.Remove(this);
            }
    
            if (DynList != null)
            {
                if (!DynList.DynListItems.Contains(this))
                {
                    DynList.DynListItems.Add(this);
                }
    
                DynListUid = DynList.DynListUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynList")
                    && (ChangeTracker.OriginalValues["DynList"] == DynList))
                {
                    ChangeTracker.OriginalValues.Remove("DynList");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynList", previousValue);
                }
                if (DynList != null && !DynList.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynList.StartTracking();
                }
            }
        }
    
        private void FixupAssociatedDynList(DynList previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AssociatedDynListItems.Contains(this))
            {
                previousValue.AssociatedDynListItems.Remove(this);
            }
    
            if (AssociatedDynList != null)
            {
                if (!AssociatedDynList.AssociatedDynListItems.Contains(this))
                {
                    AssociatedDynList.AssociatedDynListItems.Add(this);
                }
    
                AssociatedDynListUid = AssociatedDynList.DynListUid;
            }
            else if (!skipKeys)
            {
                AssociatedDynListUid = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AssociatedDynList")
                    && (ChangeTracker.OriginalValues["AssociatedDynList"] == AssociatedDynList))
                {
                    ChangeTracker.OriginalValues.Remove("AssociatedDynList");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AssociatedDynList", previousValue);
                }
                if (AssociatedDynList != null && !AssociatedDynList.ChangeTracker.ChangeTrackingEnabled)
                {
                    AssociatedDynList.StartTracking();
                }
            }
        }
    
        private void FixupDynEntityContextAttributesValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynEntityContextAttributesValues item in e.NewItems)
                {
                    item.DynListItem = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynEntityContextAttributesValues", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynEntityContextAttributesValues item in e.OldItems)
                {
                    if (ReferenceEquals(item.DynListItem, this))
                    {
                        item.DynListItem = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynEntityContextAttributesValues", item);
                    }
                }
            }
        }

        #endregion

    }
}
