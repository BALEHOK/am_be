//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    
    public partial class f_cust_GetChildAssets_Result : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public long AssetTypeUID
        {
            get { return _assetTypeUID; }
            set
            {
                if (_assetTypeUID != value)
                {
                    OnComplexPropertyChanging();
                    _assetTypeUID = value;
                    OnPropertyChanged("AssetTypeUID");
                }
            }
        }
        private long _assetTypeUID;
    
        [DataMember]
        public long AssetTypeID
        {
            get { return _assetTypeID; }
            set
            {
                if (_assetTypeID != value)
                {
                    OnComplexPropertyChanging();
                    _assetTypeID = value;
                    OnPropertyChanged("AssetTypeID");
                }
            }
        }
        private long _assetTypeID;
    
        [DataMember]
        public string AssetTypeName
        {
            get { return _assetTypeName; }
            set
            {
                if (_assetTypeName != value)
                {
                    OnComplexPropertyChanging();
                    _assetTypeName = value;
                    OnPropertyChanged("AssetTypeName");
                }
            }
        }
        private string _assetTypeName;
    
        [DataMember]
        public long AssetUID
        {
            get { return _assetUID; }
            set
            {
                if (_assetUID != value)
                {
                    OnComplexPropertyChanging();
                    _assetUID = value;
                    OnPropertyChanged("AssetUID");
                }
            }
        }
        private long _assetUID;
    
        [DataMember]
        public string AttributeName
        {
            get { return _attributeName; }
            set
            {
                if (_attributeName != value)
                {
                    OnComplexPropertyChanging();
                    _attributeName = value;
                    OnPropertyChanged("AttributeName");
                }
            }
        }
        private string _attributeName;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, f_cust_GetChildAssets_Result complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("String parameter cannot be null or empty.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.AssetTypeUID", parentPropertyName), complexObject == null ? null : (object)complexObject.AssetTypeUID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.AssetTypeID", parentPropertyName), complexObject == null ? null : (object)complexObject.AssetTypeID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.AssetTypeName", parentPropertyName), complexObject == null ? null : (object)complexObject.AssetTypeName);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.AssetUID", parentPropertyName), complexObject == null ? null : (object)complexObject.AssetUID);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.AttributeName", parentPropertyName), complexObject == null ? null : (object)complexObject.AttributeName);
        }

        #endregion

    }
}
