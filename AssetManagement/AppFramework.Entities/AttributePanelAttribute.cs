//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AttributePanel))]
    [KnownType(typeof(DynEntityAttribConfig))]
    public partial class AttributePanelAttribute: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long AttributePanelUid
        {
            get { return _attributePanelUid; }
            set
            {
                if (_attributePanelUid != value)
                {
                    ChangeTracker.RecordOriginalValue("AttributePanelUid", _attributePanelUid);
                    if (!IsDeserializing)
                    {
                        if (AttributePanel != null && AttributePanel.AttributePanelUid != value)
                        {
                            AttributePanel = null;
                        }
                    }
                    _attributePanelUid = value;
                    OnPropertyChanged("AttributePanelUid");
                }
            }
        }
        private long _attributePanelUid;
    
        [DataMember]
        public long DynEntityAttribConfigUId
        {
            get { return _dynEntityAttribConfigUId; }
            set
            {
                if (_dynEntityAttribConfigUId != value)
                {
                    ChangeTracker.RecordOriginalValue("DynEntityAttribConfigUId", _dynEntityAttribConfigUId);
                    if (!IsDeserializing)
                    {
                        if (DynEntityAttribConfig != null && DynEntityAttribConfig.DynEntityAttribConfigUid != value)
                        {
                            DynEntityAttribConfig = null;
                        }
                    }
                    _dynEntityAttribConfigUId = value;
                    OnPropertyChanged("DynEntityAttribConfigUId");
                }
            }
        }
        private long _dynEntityAttribConfigUId;
    
        [DataMember]
        public int DisplayOrder
        {
            get { return _displayOrder; }
            set
            {
                if (_displayOrder != value)
                {
                    _displayOrder = value;
                    OnPropertyChanged("DisplayOrder");
                }
            }
        }
        private int _displayOrder;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public long AttributePanelAttributeId
        {
            get { return _attributePanelAttributeId; }
            set
            {
                if (_attributePanelAttributeId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AttributePanelAttributeId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _attributePanelAttributeId = value;
                    OnPropertyChanged("AttributePanelAttributeId");
                }
            }
        }
        private long _attributePanelAttributeId;
    
        [DataMember]
        public Nullable<long> ReferencingDynEntityAttribConfigId
        {
            get { return _referencingDynEntityAttribConfigId; }
            set
            {
                if (_referencingDynEntityAttribConfigId != value)
                {
                    _referencingDynEntityAttribConfigId = value;
                    OnPropertyChanged("ReferencingDynEntityAttribConfigId");
                }
            }
        }
        private Nullable<long> _referencingDynEntityAttribConfigId;
    
        [DataMember]
        public string ScreenFormula
        {
            get { return _screenFormula; }
            set
            {
                if (_screenFormula != value)
                {
                    _screenFormula = value;
                    OnPropertyChanged("ScreenFormula");
                }
            }
        }
        private string _screenFormula;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public AttributePanel AttributePanel
        {
            get { return _attributePanel; }
            set
            {
                if (!ReferenceEquals(_attributePanel, value))
                {
                    var previousValue = _attributePanel;
                    _attributePanel = value;
                    FixupAttributePanel(previousValue);
                    OnNavigationPropertyChanged("AttributePanel");
                }
            }
        }
        private AttributePanel _attributePanel;
    
        [DataMember]
        public DynEntityAttribConfig DynEntityAttribConfig
        {
            get { return _dynEntityAttribConfig; }
            set
            {
                if (!ReferenceEquals(_dynEntityAttribConfig, value))
                {
                    var previousValue = _dynEntityAttribConfig;
                    _dynEntityAttribConfig = value;
                    FixupDynEntityAttribConfig(previousValue);
                    OnNavigationPropertyChanged("DynEntityAttribConfig");
                }
            }
        }
        private DynEntityAttribConfig _dynEntityAttribConfig;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AttributePanel = null;
            DynEntityAttribConfig = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAttributePanel(AttributePanel previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AttributePanelAttribute.Contains(this))
            {
                previousValue.AttributePanelAttribute.Remove(this);
            }
    
            if (AttributePanel != null)
            {
                if (!AttributePanel.AttributePanelAttribute.Contains(this))
                {
                    AttributePanel.AttributePanelAttribute.Add(this);
                }
    
                AttributePanelUid = AttributePanel.AttributePanelUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AttributePanel")
                    && (ChangeTracker.OriginalValues["AttributePanel"] == AttributePanel))
                {
                    ChangeTracker.OriginalValues.Remove("AttributePanel");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AttributePanel", previousValue);
                }
                if (AttributePanel != null && !AttributePanel.ChangeTracker.ChangeTrackingEnabled)
                {
                    AttributePanel.StartTracking();
                }
            }
        }
    
        private void FixupDynEntityAttribConfig(DynEntityAttribConfig previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AttributePanelAttributes.Contains(this))
            {
                previousValue.AttributePanelAttributes.Remove(this);
            }
    
            if (DynEntityAttribConfig != null)
            {
                if (!DynEntityAttribConfig.AttributePanelAttributes.Contains(this))
                {
                    DynEntityAttribConfig.AttributePanelAttributes.Add(this);
                }
    
                DynEntityAttribConfigUId = DynEntityAttribConfig.DynEntityAttribConfigUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynEntityAttribConfig")
                    && (ChangeTracker.OriginalValues["DynEntityAttribConfig"] == DynEntityAttribConfig))
                {
                    ChangeTracker.OriginalValues.Remove("DynEntityAttribConfig");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynEntityAttribConfig", previousValue);
                }
                if (DynEntityAttribConfig != null && !DynEntityAttribConfig.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynEntityAttribConfig.StartTracking();
                }
            }
        }

        #endregion

    }
}
