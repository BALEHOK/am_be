//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Taxonomy))]
    [KnownType(typeof(TaxonomyItem))]
    public partial class TaxonomyItem: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long TaxonomyItemUid
        {
            get { return _taxonomyItemUid; }
            set
            {
                if (_taxonomyItemUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaxonomyItemUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taxonomyItemUid = value;
                    OnPropertyChanged("TaxonomyItemUid");
                }
            }
        }
        private long _taxonomyItemUid;
    
        [DataMember]
        public long TaxonomyItemId
        {
            get { return _taxonomyItemId; }
            set
            {
                if (_taxonomyItemId != value)
                {
                    _taxonomyItemId = value;
                    OnPropertyChanged("TaxonomyItemId");
                }
            }
        }
        private long _taxonomyItemId;
    
        [DataMember]
        public long TaxonomyUid
        {
            get { return _taxonomyUid; }
            set
            {
                if (_taxonomyUid != value)
                {
                    ChangeTracker.RecordOriginalValue("TaxonomyUid", _taxonomyUid);
                    if (!IsDeserializing)
                    {
                        if (Taxonomy != null && Taxonomy.TaxonomyUid != value)
                        {
                            Taxonomy = null;
                        }
                    }
                    _taxonomyUid = value;
                    OnPropertyChanged("TaxonomyUid");
                }
            }
        }
        private long _taxonomyUid;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string NameTranslationId
        {
            get { return _nameTranslationId; }
            set
            {
                if (_nameTranslationId != value)
                {
                    _nameTranslationId = value;
                    OnPropertyChanged("NameTranslationId");
                }
            }
        }
        private string _nameTranslationId;
    
        [DataMember]
        public short DisplayOrder
        {
            get { return _displayOrder; }
            set
            {
                if (_displayOrder != value)
                {
                    _displayOrder = value;
                    OnPropertyChanged("DisplayOrder");
                }
            }
        }
        private short _displayOrder;
    
        [DataMember]
        public Nullable<long> ParentTaxonomyItemUid
        {
            get { return _parentTaxonomyItemUid; }
            set
            {
                if (_parentTaxonomyItemUid != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentTaxonomyItemUid", _parentTaxonomyItemUid);
                    if (!IsDeserializing)
                    {
                        if (ParentItem != null && ParentItem.TaxonomyItemUid != value)
                        {
                            ParentItem = null;
                        }
                    }
                    _parentTaxonomyItemUid = value;
                    OnPropertyChanged("ParentTaxonomyItemUid");
                }
            }
        }
        private Nullable<long> _parentTaxonomyItemUid;
    
        [DataMember]
        public string Number
        {
            get { return _number; }
            set
            {
                if (_number != value)
                {
                    _number = value;
                    OnPropertyChanged("Number");
                }
            }
        }
        private string _number;
    
        [DataMember]
        public Nullable<long> DynEntityId
        {
            get { return _dynEntityId; }
            set
            {
                if (_dynEntityId != value)
                {
                    _dynEntityId = value;
                    OnPropertyChanged("DynEntityId");
                }
            }
        }
        private Nullable<long> _dynEntityId;
    
        [DataMember]
        public string ImageName
        {
            get { return _imageName; }
            set
            {
                if (_imageName != value)
                {
                    _imageName = value;
                    OnPropertyChanged("ImageName");
                }
            }
        }
        private string _imageName;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public bool ActiveVersion
        {
            get { return _activeVersion; }
            set
            {
                if (_activeVersion != value)
                {
                    _activeVersion = value;
                    OnPropertyChanged("ActiveVersion");
                }
            }
        }
        private bool _activeVersion;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Taxonomy Taxonomy
        {
            get { return _taxonomy; }
            set
            {
                if (!ReferenceEquals(_taxonomy, value))
                {
                    var previousValue = _taxonomy;
                    _taxonomy = value;
                    FixupTaxonomy(previousValue);
                    OnNavigationPropertyChanged("Taxonomy");
                }
            }
        }
        private Taxonomy _taxonomy;
    
        [DataMember]
        public TrackableCollection<TaxonomyItem> ChildItems
        {
            get
            {
                if (_childItems == null)
                {
                    _childItems = new TrackableCollection<TaxonomyItem>();
                    _childItems.CollectionChanged += FixupChildItems;
    				_childItems.IsLoaded = false;
                }
                return _childItems;
            }
            set
            {
                if (!ReferenceEquals(_childItems, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_childItems != null)
                    {
                        _childItems.CollectionChanged -= FixupChildItems;
                    }
                    _childItems = value;
    				_childItems.IsLoaded = true;
                    if (_childItems != null)
                    {
                        _childItems.CollectionChanged += FixupChildItems;
                    }
                    OnNavigationPropertyChanged("ChildItems");
                }
            }
        }
        private TrackableCollection<TaxonomyItem> _childItems;
    
        [DataMember]
        public TaxonomyItem ParentItem
        {
            get { return _parentItem; }
            set
            {
                if (!ReferenceEquals(_parentItem, value))
                {
                    var previousValue = _parentItem;
                    _parentItem = value;
                    FixupParentItem(previousValue);
                    OnNavigationPropertyChanged("ParentItem");
                }
            }
        }
        private TaxonomyItem _parentItem;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Taxonomy = null;
            ChildItems.Clear();
            ParentItem = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupTaxonomy(Taxonomy previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.TaxonomyItem.Contains(this))
            {
                previousValue.TaxonomyItem.Remove(this);
            }
    
            if (Taxonomy != null)
            {
                if (!Taxonomy.TaxonomyItem.Contains(this))
                {
                    Taxonomy.TaxonomyItem.Add(this);
                }
    
                TaxonomyUid = Taxonomy.TaxonomyUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Taxonomy")
                    && (ChangeTracker.OriginalValues["Taxonomy"] == Taxonomy))
                {
                    ChangeTracker.OriginalValues.Remove("Taxonomy");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Taxonomy", previousValue);
                }
                if (Taxonomy != null && !Taxonomy.ChangeTracker.ChangeTrackingEnabled)
                {
                    Taxonomy.StartTracking();
                }
            }
        }
    
        private void FixupParentItem(TaxonomyItem previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ChildItems.Contains(this))
            {
                previousValue.ChildItems.Remove(this);
            }
    
            if (ParentItem != null)
            {
                if (!ParentItem.ChildItems.Contains(this))
                {
                    ParentItem.ChildItems.Add(this);
                }
    
                ParentTaxonomyItemUid = ParentItem.TaxonomyItemUid;
            }
            else if (!skipKeys)
            {
                ParentTaxonomyItemUid = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ParentItem")
                    && (ChangeTracker.OriginalValues["ParentItem"] == ParentItem))
                {
                    ChangeTracker.OriginalValues.Remove("ParentItem");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ParentItem", previousValue);
                }
                if (ParentItem != null && !ParentItem.ChangeTracker.ChangeTrackingEnabled)
                {
                    ParentItem.StartTracking();
                }
            }
        }
    
        private void FixupChildItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (TaxonomyItem item in e.NewItems)
                {
                    item.ParentItem = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ChildItems", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (TaxonomyItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.ParentItem, this))
                    {
                        item.ParentItem = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ChildItems", item);
                    }
                }
            }
        }

        #endregion

    }
}
