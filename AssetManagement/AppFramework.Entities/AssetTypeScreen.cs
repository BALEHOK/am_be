//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DynEntityConfig))]
    [KnownType(typeof(AttributePanel))]
    [KnownType(typeof(DynEntityAttribScreens))]
    [KnownType(typeof(ScreenLayout))]
    public partial class AssetTypeScreen: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long ScreenId
        {
            get { return _screenId; }
            set
            {
                if (_screenId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ScreenId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _screenId = value;
                    OnPropertyChanged("ScreenId");
                }
            }
        }
        private long _screenId;
    
        [DataMember]
        public long DynEntityConfigUid
        {
            get { return _dynEntityConfigUid; }
            set
            {
                if (_dynEntityConfigUid != value)
                {
                    ChangeTracker.RecordOriginalValue("DynEntityConfigUid", _dynEntityConfigUid);
                    if (!IsDeserializing)
                    {
                        if (DynEntityConfig != null && DynEntityConfig.DynEntityConfigUid != value)
                        {
                            DynEntityConfig = null;
                        }
                    }
                    _dynEntityConfigUid = value;
                    OnPropertyChanged("DynEntityConfigUid");
                }
            }
        }
        private long _dynEntityConfigUid;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public int Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private int _status;
    
        [DataMember]
        public string Title
        {
            get { return _title; }
            set
            {
                if (_title != value)
                {
                    _title = value;
                    OnPropertyChanged("Title");
                }
            }
        }
        private string _title;
    
        [DataMember]
        public string Subtitle
        {
            get { return _subtitle; }
            set
            {
                if (_subtitle != value)
                {
                    _subtitle = value;
                    OnPropertyChanged("Subtitle");
                }
            }
        }
        private string _subtitle;
    
        [DataMember]
        public string PageText
        {
            get { return _pageText; }
            set
            {
                if (_pageText != value)
                {
                    _pageText = value;
                    OnPropertyChanged("PageText");
                }
            }
        }
        private string _pageText;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public int LayoutId
        {
            get { return _layoutId; }
            set
            {
                if (_layoutId != value)
                {
                    ChangeTracker.RecordOriginalValue("LayoutId", _layoutId);
                    if (!IsDeserializing)
                    {
                        if (ScreenLayout != null && ScreenLayout.Id != value)
                        {
                            ScreenLayout = null;
                        }
                    }
                    _layoutId = value;
                    OnPropertyChanged("LayoutId");
                }
            }
        }
        private int _layoutId;
    
        [DataMember]
        public bool IsDefault
        {
            get { return _isDefault; }
            set
            {
                if (_isDefault != value)
                {
                    _isDefault = value;
                    OnPropertyChanged("IsDefault");
                }
            }
        }
        private bool _isDefault;
    
        [DataMember]
        public System.Guid ScreenUid
        {
            get { return _screenUid; }
            set
            {
                if (_screenUid != value)
                {
                    _screenUid = value;
                    OnPropertyChanged("ScreenUid");
                }
            }
        }
        private System.Guid _screenUid;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DynEntityConfig DynEntityConfig
        {
            get { return _dynEntityConfig; }
            set
            {
                if (!ReferenceEquals(_dynEntityConfig, value))
                {
                    var previousValue = _dynEntityConfig;
                    _dynEntityConfig = value;
                    FixupDynEntityConfig(previousValue);
                    OnNavigationPropertyChanged("DynEntityConfig");
                }
            }
        }
        private DynEntityConfig _dynEntityConfig;
    
        [DataMember]
        public TrackableCollection<AttributePanel> AttributePanel
        {
            get
            {
                if (_attributePanel == null)
                {
                    _attributePanel = new TrackableCollection<AttributePanel>();
                    _attributePanel.CollectionChanged += FixupAttributePanel;
    				_attributePanel.IsLoaded = false;
                }
                return _attributePanel;
            }
            set
            {
                if (!ReferenceEquals(_attributePanel, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attributePanel != null)
                    {
                        _attributePanel.CollectionChanged -= FixupAttributePanel;
                    }
                    _attributePanel = value;
    				_attributePanel.IsLoaded = true;
                    if (_attributePanel != null)
                    {
                        _attributePanel.CollectionChanged += FixupAttributePanel;
                    }
                    OnNavigationPropertyChanged("AttributePanel");
                }
            }
        }
        private TrackableCollection<AttributePanel> _attributePanel;
    
        [DataMember]
        public TrackableCollection<DynEntityAttribScreens> DynEntityAttribScreens
        {
            get
            {
                if (_dynEntityAttribScreens == null)
                {
                    _dynEntityAttribScreens = new TrackableCollection<DynEntityAttribScreens>();
                    _dynEntityAttribScreens.CollectionChanged += FixupDynEntityAttribScreens;
    				_dynEntityAttribScreens.IsLoaded = false;
                }
                return _dynEntityAttribScreens;
            }
            set
            {
                if (!ReferenceEquals(_dynEntityAttribScreens, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynEntityAttribScreens != null)
                    {
                        _dynEntityAttribScreens.CollectionChanged -= FixupDynEntityAttribScreens;
                    }
                    _dynEntityAttribScreens = value;
    				_dynEntityAttribScreens.IsLoaded = true;
                    if (_dynEntityAttribScreens != null)
                    {
                        _dynEntityAttribScreens.CollectionChanged += FixupDynEntityAttribScreens;
                    }
                    OnNavigationPropertyChanged("DynEntityAttribScreens");
                }
            }
        }
        private TrackableCollection<DynEntityAttribScreens> _dynEntityAttribScreens;
    
        [DataMember]
        public ScreenLayout ScreenLayout
        {
            get { return _screenLayout; }
            set
            {
                if (!ReferenceEquals(_screenLayout, value))
                {
                    var previousValue = _screenLayout;
                    _screenLayout = value;
                    FixupScreenLayout(previousValue);
                    OnNavigationPropertyChanged("ScreenLayout");
                }
            }
        }
        private ScreenLayout _screenLayout;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DynEntityConfig = null;
            AttributePanel.Clear();
            DynEntityAttribScreens.Clear();
            ScreenLayout = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupDynEntityConfig(DynEntityConfig previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AssetTypeScreen.Contains(this))
            {
                previousValue.AssetTypeScreen.Remove(this);
            }
    
            if (DynEntityConfig != null)
            {
                if (!DynEntityConfig.AssetTypeScreen.Contains(this))
                {
                    DynEntityConfig.AssetTypeScreen.Add(this);
                }
    
                DynEntityConfigUid = DynEntityConfig.DynEntityConfigUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynEntityConfig")
                    && (ChangeTracker.OriginalValues["DynEntityConfig"] == DynEntityConfig))
                {
                    ChangeTracker.OriginalValues.Remove("DynEntityConfig");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynEntityConfig", previousValue);
                }
                if (DynEntityConfig != null && !DynEntityConfig.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynEntityConfig.StartTracking();
                }
            }
        }
    
        private void FixupScreenLayout(ScreenLayout previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AssetTypeScreen.Contains(this))
            {
                previousValue.AssetTypeScreen.Remove(this);
            }
    
            if (ScreenLayout != null)
            {
                if (!ScreenLayout.AssetTypeScreen.Contains(this))
                {
                    ScreenLayout.AssetTypeScreen.Add(this);
                }
    
                LayoutId = ScreenLayout.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ScreenLayout")
                    && (ChangeTracker.OriginalValues["ScreenLayout"] == ScreenLayout))
                {
                    ChangeTracker.OriginalValues.Remove("ScreenLayout");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ScreenLayout", previousValue);
                }
                if (ScreenLayout != null && !ScreenLayout.ChangeTracker.ChangeTrackingEnabled)
                {
                    ScreenLayout.StartTracking();
                }
            }
        }
    
        private void FixupAttributePanel(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AttributePanel item in e.NewItems)
                {
                    item.AssetTypeScreen = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AttributePanel", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AttributePanel item in e.OldItems)
                {
                    if (ReferenceEquals(item.AssetTypeScreen, this))
                    {
                        item.AssetTypeScreen = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AttributePanel", item);
                    }
                }
            }
        }
    
        private void FixupDynEntityAttribScreens(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynEntityAttribScreens item in e.NewItems)
                {
                    item.AssetTypeScreen = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynEntityAttribScreens", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynEntityAttribScreens item in e.OldItems)
                {
                    if (ReferenceEquals(item.AssetTypeScreen, this))
                    {
                        item.AssetTypeScreen = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynEntityAttribScreens", item);
                    }
                }
            }
        }

        #endregion

    }
}
