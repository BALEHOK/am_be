//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    public partial class Reservation: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long ReservationUID
        {
            get { return _reservationUID; }
            set
            {
                if (_reservationUID != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReservationUID' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reservationUID = value;
                    OnPropertyChanged("ReservationUID");
                }
            }
        }
        private long _reservationUID;
    
        [DataMember]
        public long DynEntityUID
        {
            get { return _dynEntityUID; }
            set
            {
                if (_dynEntityUID != value)
                {
                    _dynEntityUID = value;
                    OnPropertyChanged("DynEntityUID");
                }
            }
        }
        private long _dynEntityUID;
    
        [DataMember]
        public long DynEntityConfigUID
        {
            get { return _dynEntityConfigUID; }
            set
            {
                if (_dynEntityConfigUID != value)
                {
                    _dynEntityConfigUID = value;
                    OnPropertyChanged("DynEntityConfigUID");
                }
            }
        }
        private long _dynEntityConfigUID;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public long Borrower
        {
            get { return _borrower; }
            set
            {
                if (_borrower != value)
                {
                    _borrower = value;
                    OnPropertyChanged("Borrower");
                }
            }
        }
        private long _borrower;
    
        [DataMember]
        public System.DateTime StartDate
        {
            get { return _startDate; }
            set
            {
                if (_startDate != value)
                {
                    _startDate = value;
                    OnPropertyChanged("StartDate");
                }
            }
        }
        private System.DateTime _startDate;
    
        [DataMember]
        public System.DateTime EndDate
        {
            get { return _endDate; }
            set
            {
                if (_endDate != value)
                {
                    _endDate = value;
                    OnPropertyChanged("EndDate");
                }
            }
        }
        private System.DateTime _endDate;
    
        [DataMember]
        public System.DateTime ReservationDate
        {
            get { return _reservationDate; }
            set
            {
                if (_reservationDate != value)
                {
                    _reservationDate = value;
                    OnPropertyChanged("ReservationDate");
                }
            }
        }
        private System.DateTime _reservationDate;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public string Reason
        {
            get { return _reason; }
            set
            {
                if (_reason != value)
                {
                    _reason = value;
                    OnPropertyChanged("Reason");
                }
            }
        }
        private string _reason;
    
        [DataMember]
        public string Remarks
        {
            get { return _remarks; }
            set
            {
                if (_remarks != value)
                {
                    _remarks = value;
                    OnPropertyChanged("Remarks");
                }
            }
        }
        private string _remarks;
    
        [DataMember]
        public bool IsClosed
        {
            get { return _isClosed; }
            set
            {
                if (_isClosed != value)
                {
                    _isClosed = value;
                    OnPropertyChanged("IsClosed");
                }
            }
        }
        private bool _isClosed;
    
        [DataMember]
        public bool IsDamaged
        {
            get { return _isDamaged; }
            set
            {
                if (_isDamaged != value)
                {
                    _isDamaged = value;
                    OnPropertyChanged("IsDamaged");
                }
            }
        }
        private bool _isDamaged;
    
        [DataMember]
        public bool IsBorrowed
        {
            get { return _isBorrowed; }
            set
            {
                if (_isBorrowed != value)
                {
                    _isBorrowed = value;
                    OnPropertyChanged("IsBorrowed");
                }
            }
        }
        private bool _isBorrowed;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
