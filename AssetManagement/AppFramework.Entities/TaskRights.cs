//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    public partial class TaskRights: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long TaskRightsId
        {
            get { return _taskRightsId; }
            set
            {
                if (_taskRightsId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaskRightsId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taskRightsId = value;
                    OnPropertyChanged("TaskRightsId");
                }
            }
        }
        private long _taskRightsId;
    
        [DataMember]
        public long ViewId
        {
            get { return _viewId; }
            set
            {
                if (_viewId != value)
                {
                    _viewId = value;
                    OnPropertyChanged("ViewId");
                }
            }
        }
        private long _viewId;
    
        [DataMember]
        public Nullable<long> TaxonomyItemId
        {
            get { return _taxonomyItemId; }
            set
            {
                if (_taxonomyItemId != value)
                {
                    _taxonomyItemId = value;
                    OnPropertyChanged("TaxonomyItemId");
                }
            }
        }
        private Nullable<long> _taxonomyItemId;
    
        [DataMember]
        public Nullable<long> DynEntityConfigId
        {
            get { return _dynEntityConfigId; }
            set
            {
                if (_dynEntityConfigId != value)
                {
                    _dynEntityConfigId = value;
                    OnPropertyChanged("DynEntityConfigId");
                }
            }
        }
        private Nullable<long> _dynEntityConfigId;
    
        [DataMember]
        public long UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    OnPropertyChanged("UserId");
                }
            }
        }
        private long _userId;
    
        [DataMember]
        public bool IsDeny
        {
            get { return _isDeny; }
            set
            {
                if (_isDeny != value)
                {
                    _isDeny = value;
                    OnPropertyChanged("IsDeny");
                }
            }
        }
        private bool _isDeny;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
