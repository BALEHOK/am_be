//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(BatchJob))]
    public partial class BatchAction: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long BatchActionUid
        {
            get { return _batchActionUid; }
            set
            {
                if (_batchActionUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'BatchActionUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _batchActionUid = value;
                    OnPropertyChanged("BatchActionUid");
                }
            }
        }
        private long _batchActionUid;
    
        [DataMember]
        public long BatchUid
        {
            get { return _batchUid; }
            set
            {
                if (_batchUid != value)
                {
                    ChangeTracker.RecordOriginalValue("BatchUid", _batchUid);
                    if (!IsDeserializing)
                    {
                        if (BatchJob != null && BatchJob.BatchUid != value)
                        {
                            BatchJob = null;
                        }
                    }
                    _batchUid = value;
                    OnPropertyChanged("BatchUid");
                }
            }
        }
        private long _batchUid;
    
        [DataMember]
        public int ActionType
        {
            get { return _actionType; }
            set
            {
                if (_actionType != value)
                {
                    _actionType = value;
                    OnPropertyChanged("ActionType");
                }
            }
        }
        private int _actionType;
    
        [DataMember]
        public long OrderId
        {
            get { return _orderId; }
            set
            {
                if (_orderId != value)
                {
                    _orderId = value;
                    OnPropertyChanged("OrderId");
                }
            }
        }
        private long _orderId;
    
        [DataMember]
        public short Status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("Status");
                }
            }
        }
        private short _status;
    
        [DataMember]
        public string ErrorMessage
        {
            get { return _errorMessage; }
            set
            {
                if (_errorMessage != value)
                {
                    _errorMessage = value;
                    OnPropertyChanged("ErrorMessage");
                }
            }
        }
        private string _errorMessage;
    
        [DataMember]
        public string ActionParams
        {
            get { return _actionParams; }
            set
            {
                if (_actionParams != value)
                {
                    _actionParams = value;
                    OnPropertyChanged("ActionParams");
                }
            }
        }
        private string _actionParams;
    
        [DataMember]
        public bool IsMandatory
        {
            get { return _isMandatory; }
            set
            {
                if (_isMandatory != value)
                {
                    _isMandatory = value;
                    OnPropertyChanged("IsMandatory");
                }
            }
        }
        private bool _isMandatory;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public BatchJob BatchJob
        {
            get { return _batchJob; }
            set
            {
                if (!ReferenceEquals(_batchJob, value))
                {
                    var previousValue = _batchJob;
                    _batchJob = value;
                    FixupBatchJob(previousValue);
                    OnNavigationPropertyChanged("BatchJob");
                }
            }
        }
        private BatchJob _batchJob;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            BatchJob = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupBatchJob(BatchJob previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.BatchActions.Contains(this))
            {
                previousValue.BatchActions.Remove(this);
            }
    
            if (BatchJob != null)
            {
                if (!BatchJob.BatchActions.Contains(this))
                {
                    BatchJob.BatchActions.Add(this);
                }
    
                BatchUid = BatchJob.BatchUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("BatchJob")
                    && (ChangeTracker.OriginalValues["BatchJob"] == BatchJob))
                {
                    ChangeTracker.OriginalValues.Remove("BatchJob");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("BatchJob", previousValue);
                }
                if (BatchJob != null && !BatchJob.ChangeTracker.ChangeTrackingEnabled)
                {
                    BatchJob.StartTracking();
                }
            }
        }

        #endregion

    }
}
