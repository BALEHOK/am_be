//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(AssetTypeScreen))]
    [KnownType(typeof(DynEntityAttribConfig))]
    public partial class DynEntityAttribScreens: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long DynEntityAttribUid
        {
            get { return _dynEntityAttribUid; }
            set
            {
                if (_dynEntityAttribUid != value)
                {
                    ChangeTracker.RecordOriginalValue("DynEntityAttribUid", _dynEntityAttribUid);
                    if (!IsDeserializing)
                    {
                        if (DynEntityAttribConfig != null && DynEntityAttribConfig.DynEntityAttribConfigUid != value)
                        {
                            DynEntityAttribConfig = null;
                        }
                    }
                    _dynEntityAttribUid = value;
                    OnPropertyChanged("DynEntityAttribUid");
                }
            }
        }
        private long _dynEntityAttribUid;
    
        [DataMember]
        public long ScreenId
        {
            get { return _screenId; }
            set
            {
                if (_screenId != value)
                {
                    ChangeTracker.RecordOriginalValue("ScreenId", _screenId);
                    if (!IsDeserializing)
                    {
                        if (AssetTypeScreen != null && AssetTypeScreen.ScreenId != value)
                        {
                            AssetTypeScreen = null;
                        }
                    }
                    _screenId = value;
                    OnPropertyChanged("ScreenId");
                }
            }
        }
        private long _screenId;
    
        [DataMember]
        public long DynEntityAttribScreensId
        {
            get { return _dynEntityAttribScreensId; }
            set
            {
                if (_dynEntityAttribScreensId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DynEntityAttribScreensId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dynEntityAttribScreensId = value;
                    OnPropertyChanged("DynEntityAttribScreensId");
                }
            }
        }
        private long _dynEntityAttribScreensId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public AssetTypeScreen AssetTypeScreen
        {
            get { return _assetTypeScreen; }
            set
            {
                if (!ReferenceEquals(_assetTypeScreen, value))
                {
                    var previousValue = _assetTypeScreen;
                    _assetTypeScreen = value;
                    FixupAssetTypeScreen(previousValue);
                    OnNavigationPropertyChanged("AssetTypeScreen");
                }
            }
        }
        private AssetTypeScreen _assetTypeScreen;
    
        [DataMember]
        public DynEntityAttribConfig DynEntityAttribConfig
        {
            get { return _dynEntityAttribConfig; }
            set
            {
                if (!ReferenceEquals(_dynEntityAttribConfig, value))
                {
                    var previousValue = _dynEntityAttribConfig;
                    _dynEntityAttribConfig = value;
                    FixupDynEntityAttribConfig(previousValue);
                    OnNavigationPropertyChanged("DynEntityAttribConfig");
                }
            }
        }
        private DynEntityAttribConfig _dynEntityAttribConfig;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            AssetTypeScreen = null;
            DynEntityAttribConfig = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupAssetTypeScreen(AssetTypeScreen previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynEntityAttribScreens.Contains(this))
            {
                previousValue.DynEntityAttribScreens.Remove(this);
            }
    
            if (AssetTypeScreen != null)
            {
                if (!AssetTypeScreen.DynEntityAttribScreens.Contains(this))
                {
                    AssetTypeScreen.DynEntityAttribScreens.Add(this);
                }
    
                ScreenId = AssetTypeScreen.ScreenId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AssetTypeScreen")
                    && (ChangeTracker.OriginalValues["AssetTypeScreen"] == AssetTypeScreen))
                {
                    ChangeTracker.OriginalValues.Remove("AssetTypeScreen");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AssetTypeScreen", previousValue);
                }
                if (AssetTypeScreen != null && !AssetTypeScreen.ChangeTracker.ChangeTrackingEnabled)
                {
                    AssetTypeScreen.StartTracking();
                }
            }
        }
    
        private void FixupDynEntityAttribConfig(DynEntityAttribConfig previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynEntityAttribScreens.Contains(this))
            {
                previousValue.DynEntityAttribScreens.Remove(this);
            }
    
            if (DynEntityAttribConfig != null)
            {
                if (!DynEntityAttribConfig.DynEntityAttribScreens.Contains(this))
                {
                    DynEntityAttribConfig.DynEntityAttribScreens.Add(this);
                }
    
                DynEntityAttribUid = DynEntityAttribConfig.DynEntityAttribConfigUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynEntityAttribConfig")
                    && (ChangeTracker.OriginalValues["DynEntityAttribConfig"] == DynEntityAttribConfig))
                {
                    ChangeTracker.OriginalValues.Remove("DynEntityAttribConfig");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynEntityAttribConfig", previousValue);
                }
                if (DynEntityAttribConfig != null && !DynEntityAttribConfig.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynEntityAttribConfig.StartTracking();
                }
            }
        }

        #endregion

    }
}
