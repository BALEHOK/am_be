//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Reservation))]
    public partial class ReservedAsset: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long ReservedAssetId
        {
            get { return _reservedAssetId; }
            set
            {
                if (_reservedAssetId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ReservedAssetId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _reservedAssetId = value;
                    OnPropertyChanged("ReservedAssetId");
                }
            }
        }
        private long _reservedAssetId;
    
        [DataMember]
        public long ReservationId
        {
            get { return _reservationId; }
            set
            {
                if (_reservationId != value)
                {
                    ChangeTracker.RecordOriginalValue("ReservationId", _reservationId);
                    if (!IsDeserializing)
                    {
                        if (Reservation != null && Reservation.ReservationId != value)
                        {
                            Reservation = null;
                        }
                    }
                    _reservationId = value;
                    OnPropertyChanged("ReservationId");
                }
            }
        }
        private long _reservationId;
    
        [DataMember]
        public long DynEntityConfigId
        {
            get { return _dynEntityConfigId; }
            set
            {
                if (_dynEntityConfigId != value)
                {
                    _dynEntityConfigId = value;
                    OnPropertyChanged("DynEntityConfigId");
                }
            }
        }
        private long _dynEntityConfigId;
    
        [DataMember]
        public long DynEntityId
        {
            get { return _dynEntityId; }
            set
            {
                if (_dynEntityId != value)
                {
                    _dynEntityId = value;
                    OnPropertyChanged("DynEntityId");
                }
            }
        }
        private long _dynEntityId;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Reservation Reservation
        {
            get { return _reservation; }
            set
            {
                if (!ReferenceEquals(_reservation, value))
                {
                    var previousValue = _reservation;
                    _reservation = value;
                    FixupReservation(previousValue);
                    OnNavigationPropertyChanged("Reservation");
                }
            }
        }
        private Reservation _reservation;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // This entity type is the dependent end in at least one association that performs cascade deletes.
        // This event handler will process notifications that occur when the principal end is deleted.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Reservation = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupReservation(Reservation previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ReservedAssets.Contains(this))
            {
                previousValue.ReservedAssets.Remove(this);
            }
    
            if (Reservation != null)
            {
                if (!Reservation.ReservedAssets.Contains(this))
                {
                    Reservation.ReservedAssets.Add(this);
                }
    
                ReservationId = Reservation.ReservationId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Reservation")
                    && (ChangeTracker.OriginalValues["Reservation"] == Reservation))
                {
                    ChangeTracker.OriginalValues.Remove("Reservation");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Reservation", previousValue);
                }
                if (Reservation != null && !Reservation.ChangeTracker.ChangeTrackingEnabled)
                {
                    Reservation.StartTracking();
                }
            }
        }

        #endregion

    }
}
