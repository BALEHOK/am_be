//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Context))]
    [KnownType(typeof(DynEntityType))]
    [KnownType(typeof(DynListValue))]
    [KnownType(typeof(AttributePanel))]
    [KnownType(typeof(AssetTypeScreen))]
    [KnownType(typeof(DynEntityContextAttributesValues))]
    [KnownType(typeof(DynEntityAttribConfig))]
    [KnownType(typeof(DynEntityTaxonomyItem))]
    [KnownType(typeof(DynEntityTaxonomyItemHistory))]
    public partial class DynEntityConfig: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long DynEntityConfigUid
        {
            get { return _dynEntityConfigUid; }
            set
            {
                if (_dynEntityConfigUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DynEntityConfigUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dynEntityConfigUid = value;
                    OnPropertyChanged("DynEntityConfigUid");
                }
            }
        }
        private long _dynEntityConfigUid;
    
        [DataMember]
        public long DynEntityConfigId
        {
            get { return _dynEntityConfigId; }
            set
            {
                if (_dynEntityConfigId != value)
                {
                    _dynEntityConfigId = value;
                    OnPropertyChanged("DynEntityConfigId");
                }
            }
        }
        private long _dynEntityConfigId;
    
        [DataMember]
        public int Revision
        {
            get { return _revision; }
            set
            {
                if (_revision != value)
                {
                    _revision = value;
                    OnPropertyChanged("Revision");
                }
            }
        }
        private int _revision;
    
        [DataMember]
        public bool ActiveVersion
        {
            get { return _activeVersion; }
            set
            {
                if (_activeVersion != value)
                {
                    _activeVersion = value;
                    OnPropertyChanged("ActiveVersion");
                }
            }
        }
        private bool _activeVersion;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string NameTranslationId
        {
            get { return _nameTranslationId; }
            set
            {
                if (_nameTranslationId != value)
                {
                    _nameTranslationId = value;
                    OnPropertyChanged("NameTranslationId");
                }
            }
        }
        private string _nameTranslationId;
    
        [DataMember]
        public string DBTableName
        {
            get { return _dBTableName; }
            set
            {
                if (_dBTableName != value)
                {
                    _dBTableName = value;
                    OnPropertyChanged("DBTableName");
                }
            }
        }
        private string _dBTableName;
    
        [DataMember]
        public int TypeId
        {
            get { return _typeId; }
            set
            {
                if (_typeId != value)
                {
                    ChangeTracker.RecordOriginalValue("TypeId", _typeId);
                    if (!IsDeserializing)
                    {
                        if (DynEntityType != null && DynEntityType.DynEntityTypeId != value)
                        {
                            DynEntityType = null;
                        }
                    }
                    _typeId = value;
                    OnPropertyChanged("TypeId");
                }
            }
        }
        private int _typeId;
    
        [DataMember]
        public Nullable<long> ContextId
        {
            get { return _contextId; }
            set
            {
                if (_contextId != value)
                {
                    ChangeTracker.RecordOriginalValue("ContextId", _contextId);
                    if (!IsDeserializing)
                    {
                        if (Context != null && Context.ContextId != value)
                        {
                            Context = null;
                        }
                    }
                    _contextId = value;
                    OnPropertyChanged("ContextId");
                }
            }
        }
        private Nullable<long> _contextId;
    
        [DataMember]
        public Nullable<long> BaseDynEntityConfigId
        {
            get { return _baseDynEntityConfigId; }
            set
            {
                if (_baseDynEntityConfigId != value)
                {
                    _baseDynEntityConfigId = value;
                    OnPropertyChanged("BaseDynEntityConfigId");
                }
            }
        }
        private Nullable<long> _baseDynEntityConfigId;
    
        [DataMember]
        public Nullable<long> LinkedDynEntityId
        {
            get { return _linkedDynEntityId; }
            set
            {
                if (_linkedDynEntityId != value)
                {
                    _linkedDynEntityId = value;
                    OnPropertyChanged("LinkedDynEntityId");
                }
            }
        }
        private Nullable<long> _linkedDynEntityId;
    
        [DataMember]
        public bool Active
        {
            get { return _active; }
            set
            {
                if (_active != value)
                {
                    _active = value;
                    OnPropertyChanged("Active");
                }
            }
        }
        private bool _active;
    
        [DataMember]
        public bool IsSearchable
        {
            get { return _isSearchable; }
            set
            {
                if (_isSearchable != value)
                {
                    _isSearchable = value;
                    OnPropertyChanged("IsSearchable");
                }
            }
        }
        private bool _isSearchable;
    
        [DataMember]
        public bool IsIndexed
        {
            get { return _isIndexed; }
            set
            {
                if (_isIndexed != value)
                {
                    _isIndexed = value;
                    OnPropertyChanged("IsIndexed");
                }
            }
        }
        private bool _isIndexed;
    
        [DataMember]
        public bool IsContextIndexed
        {
            get { return _isContextIndexed; }
            set
            {
                if (_isContextIndexed != value)
                {
                    _isContextIndexed = value;
                    OnPropertyChanged("IsContextIndexed");
                }
            }
        }
        private bool _isContextIndexed;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public Nullable<long> MeasureUnitId
        {
            get { return _measureUnitId; }
            set
            {
                if (_measureUnitId != value)
                {
                    _measureUnitId = value;
                    OnPropertyChanged("MeasureUnitId");
                }
            }
        }
        private Nullable<long> _measureUnitId;
    
        [DataMember]
        public bool IsInStock
        {
            get { return _isInStock; }
            set
            {
                if (_isInStock != value)
                {
                    _isInStock = value;
                    OnPropertyChanged("IsInStock");
                }
            }
        }
        private bool _isInStock;
    
        [DataMember]
        public bool IsUnpublished
        {
            get { return _isUnpublished; }
            set
            {
                if (_isUnpublished != value)
                {
                    _isUnpublished = value;
                    OnPropertyChanged("IsUnpublished");
                }
            }
        }
        private bool _isUnpublished;
    
        [DataMember]
        public bool AllowBorrow
        {
            get { return _allowBorrow; }
            set
            {
                if (_allowBorrow != value)
                {
                    _allowBorrow = value;
                    OnPropertyChanged("AllowBorrow");
                }
            }
        }
        private bool _allowBorrow;
    
        [DataMember]
        public int AutoGenerateName
        {
            get { return _autoGenerateName; }
            set
            {
                if (_autoGenerateName != value)
                {
                    _autoGenerateName = value;
                    OnPropertyChanged("AutoGenerateName");
                }
            }
        }
        private int _autoGenerateName;
    
        [DataMember]
        public int LayoutId
        {
            get { return _layoutId; }
            set
            {
                if (_layoutId != value)
                {
                    _layoutId = value;
                    OnPropertyChanged("LayoutId");
                }
            }
        }
        private int _layoutId;
    
        [DataMember]
        public int ScreenLayoutId
        {
            get { return _screenLayoutId; }
            set
            {
                if (_screenLayoutId != value)
                {
                    _screenLayoutId = value;
                    OnPropertyChanged("ScreenLayoutId");
                }
            }
        }
        private int _screenLayoutId;
    
        [DataMember]
        public bool ParentChildRelations
        {
            get { return _parentChildRelations; }
            set
            {
                if (_parentChildRelations != value)
                {
                    _parentChildRelations = value;
                    OnPropertyChanged("ParentChildRelations");
                }
            }
        }
        private bool _parentChildRelations;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Context Context
        {
            get { return _context; }
            set
            {
                if (!ReferenceEquals(_context, value))
                {
                    var previousValue = _context;
                    _context = value;
                    FixupContext(previousValue);
                    OnNavigationPropertyChanged("Context");
                }
            }
        }
        private Context _context;
    
        [DataMember]
        public DynEntityType DynEntityType
        {
            get { return _dynEntityType; }
            set
            {
                if (!ReferenceEquals(_dynEntityType, value))
                {
                    var previousValue = _dynEntityType;
                    _dynEntityType = value;
                    FixupDynEntityType(previousValue);
                    OnNavigationPropertyChanged("DynEntityType");
                }
            }
        }
        private DynEntityType _dynEntityType;
    
        [DataMember]
        public TrackableCollection<DynListValue> DynListValue
        {
            get
            {
                if (_dynListValue == null)
                {
                    _dynListValue = new TrackableCollection<DynListValue>();
                    _dynListValue.CollectionChanged += FixupDynListValue;
    				_dynListValue.IsLoaded = false;
                }
                return _dynListValue;
            }
            set
            {
                if (!ReferenceEquals(_dynListValue, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynListValue != null)
                    {
                        _dynListValue.CollectionChanged -= FixupDynListValue;
                    }
                    _dynListValue = value;
    				_dynListValue.IsLoaded = true;
                    if (_dynListValue != null)
                    {
                        _dynListValue.CollectionChanged += FixupDynListValue;
                    }
                    OnNavigationPropertyChanged("DynListValue");
                }
            }
        }
        private TrackableCollection<DynListValue> _dynListValue;
    
        [DataMember]
        public TrackableCollection<AttributePanel> AttributePanel
        {
            get
            {
                if (_attributePanel == null)
                {
                    _attributePanel = new TrackableCollection<AttributePanel>();
                    _attributePanel.CollectionChanged += FixupAttributePanel;
    				_attributePanel.IsLoaded = false;
                }
                return _attributePanel;
            }
            set
            {
                if (!ReferenceEquals(_attributePanel, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attributePanel != null)
                    {
                        _attributePanel.CollectionChanged -= FixupAttributePanel;
                    }
                    _attributePanel = value;
    				_attributePanel.IsLoaded = true;
                    if (_attributePanel != null)
                    {
                        _attributePanel.CollectionChanged += FixupAttributePanel;
                    }
                    OnNavigationPropertyChanged("AttributePanel");
                }
            }
        }
        private TrackableCollection<AttributePanel> _attributePanel;
    
        [DataMember]
        public TrackableCollection<AssetTypeScreen> AssetTypeScreen
        {
            get
            {
                if (_assetTypeScreen == null)
                {
                    _assetTypeScreen = new TrackableCollection<AssetTypeScreen>();
                    _assetTypeScreen.CollectionChanged += FixupAssetTypeScreen;
    				_assetTypeScreen.IsLoaded = false;
                }
                return _assetTypeScreen;
            }
            set
            {
                if (!ReferenceEquals(_assetTypeScreen, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_assetTypeScreen != null)
                    {
                        _assetTypeScreen.CollectionChanged -= FixupAssetTypeScreen;
                    }
                    _assetTypeScreen = value;
    				_assetTypeScreen.IsLoaded = true;
                    if (_assetTypeScreen != null)
                    {
                        _assetTypeScreen.CollectionChanged += FixupAssetTypeScreen;
                    }
                    OnNavigationPropertyChanged("AssetTypeScreen");
                }
            }
        }
        private TrackableCollection<AssetTypeScreen> _assetTypeScreen;
    
        [DataMember]
        public TrackableCollection<DynEntityContextAttributesValues> DynEntityContextAttributesValues
        {
            get
            {
                if (_dynEntityContextAttributesValues == null)
                {
                    _dynEntityContextAttributesValues = new TrackableCollection<DynEntityContextAttributesValues>();
                    _dynEntityContextAttributesValues.CollectionChanged += FixupDynEntityContextAttributesValues;
    				_dynEntityContextAttributesValues.IsLoaded = false;
                }
                return _dynEntityContextAttributesValues;
            }
            set
            {
                if (!ReferenceEquals(_dynEntityContextAttributesValues, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynEntityContextAttributesValues != null)
                    {
                        _dynEntityContextAttributesValues.CollectionChanged -= FixupDynEntityContextAttributesValues;
                    }
                    _dynEntityContextAttributesValues = value;
    				_dynEntityContextAttributesValues.IsLoaded = true;
                    if (_dynEntityContextAttributesValues != null)
                    {
                        _dynEntityContextAttributesValues.CollectionChanged += FixupDynEntityContextAttributesValues;
                    }
                    OnNavigationPropertyChanged("DynEntityContextAttributesValues");
                }
            }
        }
        private TrackableCollection<DynEntityContextAttributesValues> _dynEntityContextAttributesValues;
    
        [DataMember]
        public TrackableCollection<DynEntityAttribConfig> DynEntityAttribConfigs
        {
            get
            {
                if (_dynEntityAttribConfigs == null)
                {
                    _dynEntityAttribConfigs = new TrackableCollection<DynEntityAttribConfig>();
                    _dynEntityAttribConfigs.CollectionChanged += FixupDynEntityAttribConfigs;
    				_dynEntityAttribConfigs.IsLoaded = false;
                }
                return _dynEntityAttribConfigs;
            }
            set
            {
                if (!ReferenceEquals(_dynEntityAttribConfigs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynEntityAttribConfigs != null)
                    {
                        _dynEntityAttribConfigs.CollectionChanged -= FixupDynEntityAttribConfigs;
                    }
                    _dynEntityAttribConfigs = value;
    				_dynEntityAttribConfigs.IsLoaded = true;
                    if (_dynEntityAttribConfigs != null)
                    {
                        _dynEntityAttribConfigs.CollectionChanged += FixupDynEntityAttribConfigs;
                    }
                    OnNavigationPropertyChanged("DynEntityAttribConfigs");
                }
            }
        }
        private TrackableCollection<DynEntityAttribConfig> _dynEntityAttribConfigs;
    
        [DataMember]
        public TrackableCollection<DynEntityTaxonomyItem> DynEntityTaxonomyItems
        {
            get
            {
                if (_dynEntityTaxonomyItems == null)
                {
                    _dynEntityTaxonomyItems = new TrackableCollection<DynEntityTaxonomyItem>();
                    _dynEntityTaxonomyItems.CollectionChanged += FixupDynEntityTaxonomyItems;
    				_dynEntityTaxonomyItems.IsLoaded = false;
                }
                return _dynEntityTaxonomyItems;
            }
            set
            {
                if (!ReferenceEquals(_dynEntityTaxonomyItems, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynEntityTaxonomyItems != null)
                    {
                        _dynEntityTaxonomyItems.CollectionChanged -= FixupDynEntityTaxonomyItems;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DynEntityTaxonomyItem item in _dynEntityTaxonomyItems)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dynEntityTaxonomyItems = value;
    				_dynEntityTaxonomyItems.IsLoaded = true;
                    if (_dynEntityTaxonomyItems != null)
                    {
                        _dynEntityTaxonomyItems.CollectionChanged += FixupDynEntityTaxonomyItems;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DynEntityTaxonomyItem item in _dynEntityTaxonomyItems)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DynEntityTaxonomyItems");
                }
            }
        }
        private TrackableCollection<DynEntityTaxonomyItem> _dynEntityTaxonomyItems;
    
        [DataMember]
        public TrackableCollection<DynEntityTaxonomyItemHistory> DynEntityTaxonomyItemHistories
        {
            get
            {
                if (_dynEntityTaxonomyItemHistories == null)
                {
                    _dynEntityTaxonomyItemHistories = new TrackableCollection<DynEntityTaxonomyItemHistory>();
                    _dynEntityTaxonomyItemHistories.CollectionChanged += FixupDynEntityTaxonomyItemHistories;
    				_dynEntityTaxonomyItemHistories.IsLoaded = false;
                }
                return _dynEntityTaxonomyItemHistories;
            }
            set
            {
                if (!ReferenceEquals(_dynEntityTaxonomyItemHistories, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynEntityTaxonomyItemHistories != null)
                    {
                        _dynEntityTaxonomyItemHistories.CollectionChanged -= FixupDynEntityTaxonomyItemHistories;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DynEntityTaxonomyItemHistory item in _dynEntityTaxonomyItemHistories)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dynEntityTaxonomyItemHistories = value;
    				_dynEntityTaxonomyItemHistories.IsLoaded = true;
                    if (_dynEntityTaxonomyItemHistories != null)
                    {
                        _dynEntityTaxonomyItemHistories.CollectionChanged += FixupDynEntityTaxonomyItemHistories;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DynEntityTaxonomyItemHistory item in _dynEntityTaxonomyItemHistories)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DynEntityTaxonomyItemHistories");
                }
            }
        }
        private TrackableCollection<DynEntityTaxonomyItemHistory> _dynEntityTaxonomyItemHistories;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Context = null;
            DynEntityType = null;
            DynListValue.Clear();
            AttributePanel.Clear();
            AssetTypeScreen.Clear();
            DynEntityContextAttributesValues.Clear();
            DynEntityAttribConfigs.Clear();
            DynEntityTaxonomyItems.Clear();
            DynEntityTaxonomyItemHistories.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupContext(Context previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynEntityConfig.Contains(this))
            {
                previousValue.DynEntityConfig.Remove(this);
            }
    
            if (Context != null)
            {
                if (!Context.DynEntityConfig.Contains(this))
                {
                    Context.DynEntityConfig.Add(this);
                }
    
                ContextId = Context.ContextId;
            }
            else if (!skipKeys)
            {
                ContextId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Context")
                    && (ChangeTracker.OriginalValues["Context"] == Context))
                {
                    ChangeTracker.OriginalValues.Remove("Context");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Context", previousValue);
                }
                if (Context != null && !Context.ChangeTracker.ChangeTrackingEnabled)
                {
                    Context.StartTracking();
                }
            }
        }
    
        private void FixupDynEntityType(DynEntityType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynEntityConfig.Contains(this))
            {
                previousValue.DynEntityConfig.Remove(this);
            }
    
            if (DynEntityType != null)
            {
                if (!DynEntityType.DynEntityConfig.Contains(this))
                {
                    DynEntityType.DynEntityConfig.Add(this);
                }
    
                TypeId = DynEntityType.DynEntityTypeId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynEntityType")
                    && (ChangeTracker.OriginalValues["DynEntityType"] == DynEntityType))
                {
                    ChangeTracker.OriginalValues.Remove("DynEntityType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynEntityType", previousValue);
                }
                if (DynEntityType != null && !DynEntityType.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynEntityType.StartTracking();
                }
            }
        }
    
        private void FixupDynListValue(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynListValue item in e.NewItems)
                {
                    item.DynEntityConfig = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynListValue", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynListValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.DynEntityConfig, this))
                    {
                        item.DynEntityConfig = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynListValue", item);
                    }
                }
            }
        }
    
        private void FixupAttributePanel(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AttributePanel item in e.NewItems)
                {
                    item.DynEntityConfig = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AttributePanel", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AttributePanel item in e.OldItems)
                {
                    if (ReferenceEquals(item.DynEntityConfig, this))
                    {
                        item.DynEntityConfig = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AttributePanel", item);
                    }
                }
            }
        }
    
        private void FixupAssetTypeScreen(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AssetTypeScreen item in e.NewItems)
                {
                    item.DynEntityConfig = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AssetTypeScreen", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AssetTypeScreen item in e.OldItems)
                {
                    if (ReferenceEquals(item.DynEntityConfig, this))
                    {
                        item.DynEntityConfig = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AssetTypeScreen", item);
                    }
                }
            }
        }
    
        private void FixupDynEntityContextAttributesValues(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynEntityContextAttributesValues item in e.NewItems)
                {
                    item.DynEntityConfig = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynEntityContextAttributesValues", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynEntityContextAttributesValues item in e.OldItems)
                {
                    if (ReferenceEquals(item.DynEntityConfig, this))
                    {
                        item.DynEntityConfig = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynEntityContextAttributesValues", item);
                    }
                }
            }
        }
    
        private void FixupDynEntityAttribConfigs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynEntityAttribConfig item in e.NewItems)
                {
                    item.DynEntityConfig = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynEntityAttribConfigs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynEntityAttribConfig item in e.OldItems)
                {
                    if (ReferenceEquals(item.DynEntityConfig, this))
                    {
                        item.DynEntityConfig = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynEntityAttribConfigs", item);
                    }
                }
            }
        }
    
        private void FixupDynEntityTaxonomyItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynEntityTaxonomyItem item in e.NewItems)
                {
                    item.DynEntityConfig = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynEntityTaxonomyItems", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynEntityTaxonomyItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.DynEntityConfig, this))
                    {
                        item.DynEntityConfig = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynEntityTaxonomyItems", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupDynEntityTaxonomyItemHistories(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynEntityTaxonomyItemHistory item in e.NewItems)
                {
                    item.DynEntityConfig = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynEntityTaxonomyItemHistories", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynEntityTaxonomyItemHistory item in e.OldItems)
                {
                    if (ReferenceEquals(item.DynEntityConfig, this))
                    {
                        item.DynEntityConfig = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynEntityTaxonomyItemHistories", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
