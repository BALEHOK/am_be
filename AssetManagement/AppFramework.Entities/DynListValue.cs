//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DynEntityConfig))]
    [KnownType(typeof(DynEntityAttribConfig))]
    public partial class DynListValue: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long DynListUid
        {
            get { return _dynListUid; }
            set
            {
                if (_dynListUid != value)
                {
                    _dynListUid = value;
                    OnPropertyChanged("DynListUid");
                }
            }
        }
        private long _dynListUid;
    
        [DataMember]
        public long DynListItemUid
        {
            get { return _dynListItemUid; }
            set
            {
                if (_dynListItemUid != value)
                {
                    _dynListItemUid = value;
                    OnPropertyChanged("DynListItemUid");
                }
            }
        }
        private long _dynListItemUid;
    
        [DataMember]
        public long ParentListId
        {
            get { return _parentListId; }
            set
            {
                if (_parentListId != value)
                {
                    _parentListId = value;
                    OnPropertyChanged("ParentListId");
                }
            }
        }
        private long _parentListId;
    
        [DataMember]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    OnPropertyChanged("Value");
                }
            }
        }
        private string _value;
    
        [DataMember]
        public long AssetUid
        {
            get { return _assetUid; }
            set
            {
                if (_assetUid != value)
                {
                    _assetUid = value;
                    OnPropertyChanged("AssetUid");
                }
            }
        }
        private long _assetUid;
    
        [DataMember]
        public long DynEntityConfigUid
        {
            get { return _dynEntityConfigUid; }
            set
            {
                if (_dynEntityConfigUid != value)
                {
                    ChangeTracker.RecordOriginalValue("DynEntityConfigUid", _dynEntityConfigUid);
                    if (!IsDeserializing)
                    {
                        if (DynEntityConfig != null && DynEntityConfig.DynEntityConfigUid != value)
                        {
                            DynEntityConfig = null;
                        }
                    }
                    _dynEntityConfigUid = value;
                    OnPropertyChanged("DynEntityConfigUid");
                }
            }
        }
        private long _dynEntityConfigUid;
    
        [DataMember]
        public long DynEntityAttribConfigUid
        {
            get { return _dynEntityAttribConfigUid; }
            set
            {
                if (_dynEntityAttribConfigUid != value)
                {
                    ChangeTracker.RecordOriginalValue("DynEntityAttribConfigUid", _dynEntityAttribConfigUid);
                    if (!IsDeserializing)
                    {
                        if (DynEntityAttribConfig != null && DynEntityAttribConfig.DynEntityAttribConfigUid != value)
                        {
                            DynEntityAttribConfig = null;
                        }
                    }
                    _dynEntityAttribConfigUid = value;
                    OnPropertyChanged("DynEntityAttribConfigUid");
                }
            }
        }
        private long _dynEntityAttribConfigUid;
    
        [DataMember]
        public long DynListValueUid
        {
            get { return _dynListValueUid; }
            set
            {
                if (_dynListValueUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DynListValueUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dynListValueUid = value;
                    OnPropertyChanged("DynListValueUid");
                }
            }
        }
        private long _dynListValueUid;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DynEntityConfig DynEntityConfig
        {
            get { return _dynEntityConfig; }
            set
            {
                if (!ReferenceEquals(_dynEntityConfig, value))
                {
                    var previousValue = _dynEntityConfig;
                    _dynEntityConfig = value;
                    FixupDynEntityConfig(previousValue);
                    OnNavigationPropertyChanged("DynEntityConfig");
                }
            }
        }
        private DynEntityConfig _dynEntityConfig;
    
        [DataMember]
        public DynEntityAttribConfig DynEntityAttribConfig
        {
            get { return _dynEntityAttribConfig; }
            set
            {
                if (!ReferenceEquals(_dynEntityAttribConfig, value))
                {
                    var previousValue = _dynEntityAttribConfig;
                    _dynEntityAttribConfig = value;
                    FixupDynEntityAttribConfig(previousValue);
                    OnNavigationPropertyChanged("DynEntityAttribConfig");
                }
            }
        }
        private DynEntityAttribConfig _dynEntityAttribConfig;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DynEntityConfig = null;
            DynEntityAttribConfig = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupDynEntityConfig(DynEntityConfig previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynListValue.Contains(this))
            {
                previousValue.DynListValue.Remove(this);
            }
    
            if (DynEntityConfig != null)
            {
                if (!DynEntityConfig.DynListValue.Contains(this))
                {
                    DynEntityConfig.DynListValue.Add(this);
                }
    
                DynEntityConfigUid = DynEntityConfig.DynEntityConfigUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynEntityConfig")
                    && (ChangeTracker.OriginalValues["DynEntityConfig"] == DynEntityConfig))
                {
                    ChangeTracker.OriginalValues.Remove("DynEntityConfig");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynEntityConfig", previousValue);
                }
                if (DynEntityConfig != null && !DynEntityConfig.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynEntityConfig.StartTracking();
                }
            }
        }
    
        private void FixupDynEntityAttribConfig(DynEntityAttribConfig previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynListValues.Contains(this))
            {
                previousValue.DynListValues.Remove(this);
            }
    
            if (DynEntityAttribConfig != null)
            {
                if (!DynEntityAttribConfig.DynListValues.Contains(this))
                {
                    DynEntityAttribConfig.DynListValues.Add(this);
                }
    
                DynEntityAttribConfigUid = DynEntityAttribConfig.DynEntityAttribConfigUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynEntityAttribConfig")
                    && (ChangeTracker.OriginalValues["DynEntityAttribConfig"] == DynEntityAttribConfig))
                {
                    ChangeTracker.OriginalValues.Remove("DynEntityAttribConfig");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynEntityAttribConfig", previousValue);
                }
                if (DynEntityAttribConfig != null && !DynEntityAttribConfig.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynEntityAttribConfig.StartTracking();
                }
            }
        }

        #endregion

    }
}
