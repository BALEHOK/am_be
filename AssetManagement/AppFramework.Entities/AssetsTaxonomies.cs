//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    public partial class AssetsTaxonomies: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long DynEntityConfigUid
        {
            get { return _dynEntityConfigUid; }
            set
            {
                if (_dynEntityConfigUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DynEntityConfigUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dynEntityConfigUid = value;
                    OnPropertyChanged("DynEntityConfigUid");
                }
            }
        }
        private long _dynEntityConfigUid;
    
        [DataMember]
        public long DynEntityUid
        {
            get { return _dynEntityUid; }
            set
            {
                if (_dynEntityUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DynEntityUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dynEntityUid = value;
                    OnPropertyChanged("DynEntityUid");
                }
            }
        }
        private long _dynEntityUid;
    
        [DataMember]
        public string TaxonomyItemName
        {
            get { return _taxonomyItemName; }
            set
            {
                if (_taxonomyItemName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaxonomyItemName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taxonomyItemName = value;
                    OnPropertyChanged("TaxonomyItemName");
                }
            }
        }
        private string _taxonomyItemName;
    
        [DataMember]
        public string TaxonomyName
        {
            get { return _taxonomyName; }
            set
            {
                if (_taxonomyName != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaxonomyName' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taxonomyName = value;
                    OnPropertyChanged("TaxonomyName");
                }
            }
        }
        private string _taxonomyName;
    
        [DataMember]
        public long TaxonomyItemId
        {
            get { return _taxonomyItemId; }
            set
            {
                if (_taxonomyItemId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaxonomyItemId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taxonomyItemId = value;
                    OnPropertyChanged("TaxonomyItemId");
                }
            }
        }
        private long _taxonomyItemId;
    
        [DataMember]
        public long TaxonomyItemUid
        {
            get { return _taxonomyItemUid; }
            set
            {
                if (_taxonomyItemUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaxonomyItemUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taxonomyItemUid = value;
                    OnPropertyChanged("TaxonomyItemUid");
                }
            }
        }
        private long _taxonomyItemUid;
    
        [DataMember]
        public long TaxonomyUid
        {
            get { return _taxonomyUid; }
            set
            {
                if (_taxonomyUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaxonomyUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taxonomyUid = value;
                    OnPropertyChanged("TaxonomyUid");
                }
            }
        }
        private long _taxonomyUid;
    
        [DataMember]
        public int TaxonomyId
        {
            get { return _taxonomyId; }
            set
            {
                if (_taxonomyId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'TaxonomyId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _taxonomyId = value;
                    OnPropertyChanged("TaxonomyId");
                }
            }
        }
        private int _taxonomyId;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsActive' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;
    
        [DataMember]
        public bool IsCategory
        {
            get { return _isCategory; }
            set
            {
                if (_isCategory != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'IsCategory' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _isCategory = value;
                    OnPropertyChanged("IsCategory");
                }
            }
        }
        private bool _isCategory;
    
        [DataMember]
        public string TaxonomyItemDescription
        {
            get { return _taxonomyItemDescription; }
            set
            {
                if (_taxonomyItemDescription != value)
                {
                    _taxonomyItemDescription = value;
                    OnPropertyChanged("TaxonomyItemDescription");
                }
            }
        }
        private string _taxonomyItemDescription;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
