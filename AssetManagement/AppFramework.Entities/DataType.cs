//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Context))]
    [KnownType(typeof(SearchOperators))]
    [KnownType(typeof(ValidationList))]
    [KnownType(typeof(DynEntityAttribConfig))]
    [KnownType(typeof(DynList))]
    public partial class DataType: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long DataTypeUid
        {
            get { return _dataTypeUid; }
            set
            {
                if (_dataTypeUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DataTypeUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dataTypeUid = value;
                    OnPropertyChanged("DataTypeUid");
                }
            }
        }
        private long _dataTypeUid;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string NameTranslationId
        {
            get { return _nameTranslationId; }
            set
            {
                if (_nameTranslationId != value)
                {
                    _nameTranslationId = value;
                    OnPropertyChanged("NameTranslationId");
                }
            }
        }
        private string _nameTranslationId;
    
        [DataMember]
        public string DBDataType
        {
            get { return _dBDataType; }
            set
            {
                if (_dBDataType != value)
                {
                    _dBDataType = value;
                    OnPropertyChanged("DBDataType");
                }
            }
        }
        private string _dBDataType;
    
        [DataMember]
        public string FrameworkDataType
        {
            get { return _frameworkDataType; }
            set
            {
                if (_frameworkDataType != value)
                {
                    _frameworkDataType = value;
                    OnPropertyChanged("FrameworkDataType");
                }
            }
        }
        private string _frameworkDataType;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public Nullable<int> StringSize
        {
            get { return _stringSize; }
            set
            {
                if (_stringSize != value)
                {
                    _stringSize = value;
                    OnPropertyChanged("StringSize");
                }
            }
        }
        private Nullable<int> _stringSize;
    
        [DataMember]
        public Nullable<int> DefaultValueID
        {
            get { return _defaultValueID; }
            set
            {
                if (_defaultValueID != value)
                {
                    _defaultValueID = value;
                    OnPropertyChanged("DefaultValueID");
                }
            }
        }
        private Nullable<int> _defaultValueID;
    
        [DataMember]
        public string ValidationExpr
        {
            get { return _validationExpr; }
            set
            {
                if (_validationExpr != value)
                {
                    _validationExpr = value;
                    OnPropertyChanged("ValidationExpr");
                }
            }
        }
        private string _validationExpr;
    
        [DataMember]
        public bool IsInternal
        {
            get { return _isInternal; }
            set
            {
                if (_isInternal != value)
                {
                    _isInternal = value;
                    OnPropertyChanged("IsInternal");
                }
            }
        }
        private bool _isInternal;
    
        [DataMember]
        public bool IsEditable
        {
            get { return _isEditable; }
            set
            {
                if (_isEditable != value)
                {
                    _isEditable = value;
                    OnPropertyChanged("IsEditable");
                }
            }
        }
        private bool _isEditable;
    
        [DataMember]
        public string ValidationMessage
        {
            get { return _validationMessage; }
            set
            {
                if (_validationMessage != value)
                {
                    _validationMessage = value;
                    OnPropertyChanged("ValidationMessage");
                }
            }
        }
        private string _validationMessage;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<Context> Context
        {
            get
            {
                if (_context == null)
                {
                    _context = new TrackableCollection<Context>();
                    _context.CollectionChanged += FixupContext;
    				_context.IsLoaded = false;
                }
                return _context;
            }
            set
            {
                if (!ReferenceEquals(_context, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_context != null)
                    {
                        _context.CollectionChanged -= FixupContext;
                    }
                    _context = value;
    				_context.IsLoaded = true;
                    if (_context != null)
                    {
                        _context.CollectionChanged += FixupContext;
                    }
                    OnNavigationPropertyChanged("Context");
                }
            }
        }
        private TrackableCollection<Context> _context;
    
        [DataMember]
        public TrackableCollection<SearchOperators> SearchOperators
        {
            get
            {
                if (_searchOperators == null)
                {
                    _searchOperators = new TrackableCollection<SearchOperators>();
                    _searchOperators.CollectionChanged += FixupSearchOperators;
    				_searchOperators.IsLoaded = false;
                }
                return _searchOperators;
            }
            set
            {
                if (!ReferenceEquals(_searchOperators, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_searchOperators != null)
                    {
                        _searchOperators.CollectionChanged -= FixupSearchOperators;
                    }
                    _searchOperators = value;
    				_searchOperators.IsLoaded = true;
                    if (_searchOperators != null)
                    {
                        _searchOperators.CollectionChanged += FixupSearchOperators;
                    }
                    OnNavigationPropertyChanged("SearchOperators");
                }
            }
        }
        private TrackableCollection<SearchOperators> _searchOperators;
    
        [DataMember]
        public TrackableCollection<ValidationList> ValidationList
        {
            get
            {
                if (_validationList == null)
                {
                    _validationList = new TrackableCollection<ValidationList>();
                    _validationList.CollectionChanged += FixupValidationList;
    				_validationList.IsLoaded = false;
                }
                return _validationList;
            }
            set
            {
                if (!ReferenceEquals(_validationList, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_validationList != null)
                    {
                        _validationList.CollectionChanged -= FixupValidationList;
                    }
                    _validationList = value;
    				_validationList.IsLoaded = true;
                    if (_validationList != null)
                    {
                        _validationList.CollectionChanged += FixupValidationList;
                    }
                    OnNavigationPropertyChanged("ValidationList");
                }
            }
        }
        private TrackableCollection<ValidationList> _validationList;
    
        [DataMember]
        public TrackableCollection<DynEntityAttribConfig> DynEntityAttribConfigs
        {
            get
            {
                if (_dynEntityAttribConfigs == null)
                {
                    _dynEntityAttribConfigs = new TrackableCollection<DynEntityAttribConfig>();
                    _dynEntityAttribConfigs.CollectionChanged += FixupDynEntityAttribConfigs;
    				_dynEntityAttribConfigs.IsLoaded = false;
                }
                return _dynEntityAttribConfigs;
            }
            set
            {
                if (!ReferenceEquals(_dynEntityAttribConfigs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynEntityAttribConfigs != null)
                    {
                        _dynEntityAttribConfigs.CollectionChanged -= FixupDynEntityAttribConfigs;
                    }
                    _dynEntityAttribConfigs = value;
    				_dynEntityAttribConfigs.IsLoaded = true;
                    if (_dynEntityAttribConfigs != null)
                    {
                        _dynEntityAttribConfigs.CollectionChanged += FixupDynEntityAttribConfigs;
                    }
                    OnNavigationPropertyChanged("DynEntityAttribConfigs");
                }
            }
        }
        private TrackableCollection<DynEntityAttribConfig> _dynEntityAttribConfigs;
    
        [DataMember]
        public TrackableCollection<DynList> DynLists
        {
            get
            {
                if (_dynLists == null)
                {
                    _dynLists = new TrackableCollection<DynList>();
                    _dynLists.CollectionChanged += FixupDynLists;
    				_dynLists.IsLoaded = false;
                }
                return _dynLists;
            }
            set
            {
                if (!ReferenceEquals(_dynLists, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynLists != null)
                    {
                        _dynLists.CollectionChanged -= FixupDynLists;
                    }
                    _dynLists = value;
    				_dynLists.IsLoaded = true;
                    if (_dynLists != null)
                    {
                        _dynLists.CollectionChanged += FixupDynLists;
                    }
                    OnNavigationPropertyChanged("DynLists");
                }
            }
        }
        private TrackableCollection<DynList> _dynLists;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Context.Clear();
            SearchOperators.Clear();
            ValidationList.Clear();
            DynEntityAttribConfigs.Clear();
            DynLists.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupContext(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Context item in e.NewItems)
                {
                    item.DataType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Context", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Context item in e.OldItems)
                {
                    if (ReferenceEquals(item.DataType, this))
                    {
                        item.DataType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Context", item);
                    }
                }
            }
        }
    
        private void FixupSearchOperators(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SearchOperators item in e.NewItems)
                {
                    if (!item.DataType.Contains(this))
                    {
                        item.DataType.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("SearchOperators", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SearchOperators item in e.OldItems)
                {
                    if (item.DataType.Contains(this))
                    {
                        item.DataType.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("SearchOperators", item);
                    }
                }
            }
        }
    
        private void FixupValidationList(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ValidationList item in e.NewItems)
                {
                    if (!item.DataType.Contains(this))
                    {
                        item.DataType.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ValidationList", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ValidationList item in e.OldItems)
                {
                    if (item.DataType.Contains(this))
                    {
                        item.DataType.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ValidationList", item);
                    }
                }
            }
        }
    
        private void FixupDynEntityAttribConfigs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynEntityAttribConfig item in e.NewItems)
                {
                    item.DataType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynEntityAttribConfigs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynEntityAttribConfig item in e.OldItems)
                {
                    if (ReferenceEquals(item.DataType, this))
                    {
                        item.DataType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynEntityAttribConfigs", item);
                    }
                }
            }
        }
    
        private void FixupDynLists(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynList item in e.NewItems)
                {
                    item.DataType = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynLists", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynList item in e.OldItems)
                {
                    if (ReferenceEquals(item.DataType, this))
                    {
                        item.DataType = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynLists", item);
                    }
                }
            }
        }

        #endregion

    }
}
