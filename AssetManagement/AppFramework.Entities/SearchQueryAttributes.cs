//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(SearchQueries))]
    [KnownType(typeof(SearchQueryAttributes))]
    public partial class SearchQueryAttributes: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;
    
        [DataMember]
        public long SearchQueryId
        {
            get { return _searchQueryId; }
            set
            {
                if (_searchQueryId != value)
                {
                    ChangeTracker.RecordOriginalValue("SearchQueryId", _searchQueryId);
                    if (!IsDeserializing)
                    {
                        if (SearchQuery != null && SearchQuery.Id != value)
                        {
                            SearchQuery = null;
                        }
                    }
                    _searchQueryId = value;
                    OnPropertyChanged("SearchQueryId");
                }
            }
        }
        private long _searchQueryId;
    
        [DataMember]
        public Nullable<long> ParentId
        {
            get { return _parentId; }
            set
            {
                if (_parentId != value)
                {
                    _parentId = value;
                    OnPropertyChanged("ParentId");
                }
            }
        }
        private Nullable<long> _parentId;
    
        [DataMember]
        public Nullable<int> Parenthesis
        {
            get { return _parenthesis; }
            set
            {
                if (_parenthesis != value)
                {
                    _parenthesis = value;
                    OnPropertyChanged("Parenthesis");
                }
            }
        }
        private Nullable<int> _parenthesis;
    
        [DataMember]
        public Nullable<int> OperatorId
        {
            get { return _operatorId; }
            set
            {
                if (_operatorId != value)
                {
                    _operatorId = value;
                    OnPropertyChanged("OperatorId");
                }
            }
        }
        private Nullable<int> _operatorId;
    
        [DataMember]
        public string ValueLabel
        {
            get { return _valueLabel; }
            set
            {
                if (_valueLabel != value)
                {
                    _valueLabel = value;
                    OnPropertyChanged("ValueLabel");
                }
            }
        }
        private string _valueLabel;
    
        [DataMember]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    OnPropertyChanged("Value");
                }
            }
        }
        private string _value;
    
        [DataMember]
        public long ReferencedAttributeId
        {
            get { return _referencedAttributeId; }
            set
            {
                if (_referencedAttributeId != value)
                {
                    _referencedAttributeId = value;
                    OnPropertyChanged("ReferencedAttributeId");
                }
            }
        }
        private long _referencedAttributeId;
    
        [DataMember]
        public Nullable<long> ParentId1
        {
            get { return _parentId1; }
            set
            {
                if (_parentId1 != value)
                {
                    ChangeTracker.RecordOriginalValue("ParentId1", _parentId1);
                    _parentId1 = value;
                    OnPropertyChanged("ParentId1");
                }
            }
        }
        private Nullable<long> _parentId1;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public SearchQueries SearchQuery
        {
            get { return _searchQuery; }
            set
            {
                if (!ReferenceEquals(_searchQuery, value))
                {
                    var previousValue = _searchQuery;
                    _searchQuery = value;
                    FixupSearchQuery(previousValue);
                    OnNavigationPropertyChanged("SearchQuery");
                }
            }
        }
        private SearchQueries _searchQuery;
    
        [DataMember]
        public TrackableCollection<SearchQueryAttributes> ComplexValue
        {
            get
            {
                if (_complexValue == null)
                {
                    _complexValue = new TrackableCollection<SearchQueryAttributes>();
                    _complexValue.CollectionChanged += FixupComplexValue;
    				_complexValue.IsLoaded = false;
                }
                return _complexValue;
            }
            set
            {
                if (!ReferenceEquals(_complexValue, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_complexValue != null)
                    {
                        _complexValue.CollectionChanged -= FixupComplexValue;
                    }
                    _complexValue = value;
    				_complexValue.IsLoaded = true;
                    if (_complexValue != null)
                    {
                        _complexValue.CollectionChanged += FixupComplexValue;
                    }
                    OnNavigationPropertyChanged("ComplexValue");
                }
            }
        }
        private TrackableCollection<SearchQueryAttributes> _complexValue;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            SearchQuery = null;
            ComplexValue.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupSearchQuery(SearchQueries previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.SearchQueryAttributes.Contains(this))
            {
                previousValue.SearchQueryAttributes.Remove(this);
            }
    
            if (SearchQuery != null)
            {
                if (!SearchQuery.SearchQueryAttributes.Contains(this))
                {
                    SearchQuery.SearchQueryAttributes.Add(this);
                }
    
                SearchQueryId = SearchQuery.Id;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("SearchQuery")
                    && (ChangeTracker.OriginalValues["SearchQuery"] == SearchQuery))
                {
                    ChangeTracker.OriginalValues.Remove("SearchQuery");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("SearchQuery", previousValue);
                }
                if (SearchQuery != null && !SearchQuery.ChangeTracker.ChangeTrackingEnabled)
                {
                    SearchQuery.StartTracking();
                }
            }
        }
    
        private void FixupComplexValue(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (SearchQueryAttributes item in e.NewItems)
                {
                    item.ParentId1 = Id;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ComplexValue", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SearchQueryAttributes item in e.OldItems)
                {
                    item.ParentId1 = null;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ComplexValue", item);
                    }
                }
            }
        }

        #endregion

    }
}
