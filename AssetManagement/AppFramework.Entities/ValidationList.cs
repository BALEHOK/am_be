//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(ValidationOperator))]
    [KnownType(typeof(DataType))]
    [KnownType(typeof(DynEntityAttribValidation))]
    [KnownType(typeof(ValidationOperandValue))]
    public partial class ValidationList: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long ValidationUid
        {
            get { return _validationUid; }
            set
            {
                if (_validationUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'ValidationUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _validationUid = value;
                    OnPropertyChanged("ValidationUid");
                }
            }
        }
        private long _validationUid;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string NameTranslationId
        {
            get { return _nameTranslationId; }
            set
            {
                if (_nameTranslationId != value)
                {
                    _nameTranslationId = value;
                    OnPropertyChanged("NameTranslationId");
                }
            }
        }
        private string _nameTranslationId;
    
        [DataMember]
        public string Operator
        {
            get { return _operator; }
            set
            {
                if (_operator != value)
                {
                    _operator = value;
                    OnPropertyChanged("Operator");
                }
            }
        }
        private string _operator;
    
        [DataMember]
        public string Operand1
        {
            get { return _operand1; }
            set
            {
                if (_operand1 != value)
                {
                    _operand1 = value;
                    OnPropertyChanged("Operand1");
                }
            }
        }
        private string _operand1;
    
        [DataMember]
        public string Operand2
        {
            get { return _operand2; }
            set
            {
                if (_operand2 != value)
                {
                    _operand2 = value;
                    OnPropertyChanged("Operand2");
                }
            }
        }
        private string _operand2;
    
        [DataMember]
        public string RegExpression
        {
            get { return _regExpression; }
            set
            {
                if (_regExpression != value)
                {
                    _regExpression = value;
                    OnPropertyChanged("RegExpression");
                }
            }
        }
        private string _regExpression;
    
        [DataMember]
        public Nullable<int> NumberOfRegExprMatches
        {
            get { return _numberOfRegExprMatches; }
            set
            {
                if (_numberOfRegExprMatches != value)
                {
                    _numberOfRegExprMatches = value;
                    OnPropertyChanged("NumberOfRegExprMatches");
                }
            }
        }
        private Nullable<int> _numberOfRegExprMatches;
    
        [DataMember]
        public string ServiceMethod
        {
            get { return _serviceMethod; }
            set
            {
                if (_serviceMethod != value)
                {
                    _serviceMethod = value;
                    OnPropertyChanged("ServiceMethod");
                }
            }
        }
        private string _serviceMethod;
    
        [DataMember]
        public long ValidationOperatorUid
        {
            get { return _validationOperatorUid; }
            set
            {
                if (_validationOperatorUid != value)
                {
                    ChangeTracker.RecordOriginalValue("ValidationOperatorUid", _validationOperatorUid);
                    if (!IsDeserializing)
                    {
                        if (ValidationOperator != null && ValidationOperator.ValidationOperatorUid != value)
                        {
                            ValidationOperator = null;
                        }
                    }
                    _validationOperatorUid = value;
                    OnPropertyChanged("ValidationOperatorUid");
                }
            }
        }
        private long _validationOperatorUid;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public ValidationOperator ValidationOperator
        {
            get { return _validationOperator; }
            set
            {
                if (!ReferenceEquals(_validationOperator, value))
                {
                    var previousValue = _validationOperator;
                    _validationOperator = value;
                    FixupValidationOperator(previousValue);
                    OnNavigationPropertyChanged("ValidationOperator");
                }
            }
        }
        private ValidationOperator _validationOperator;
    
        [DataMember]
        public TrackableCollection<DataType> DataType
        {
            get
            {
                if (_dataType == null)
                {
                    _dataType = new TrackableCollection<DataType>();
                    _dataType.CollectionChanged += FixupDataType;
    				_dataType.IsLoaded = false;
                }
                return _dataType;
            }
            set
            {
                if (!ReferenceEquals(_dataType, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dataType != null)
                    {
                        _dataType.CollectionChanged -= FixupDataType;
                    }
                    _dataType = value;
    				_dataType.IsLoaded = true;
                    if (_dataType != null)
                    {
                        _dataType.CollectionChanged += FixupDataType;
                    }
                    OnNavigationPropertyChanged("DataType");
                }
            }
        }
        private TrackableCollection<DataType> _dataType;
    
        [DataMember]
        public TrackableCollection<DynEntityAttribValidation> DynEntityAttribValidation
        {
            get
            {
                if (_dynEntityAttribValidation == null)
                {
                    _dynEntityAttribValidation = new TrackableCollection<DynEntityAttribValidation>();
                    _dynEntityAttribValidation.CollectionChanged += FixupDynEntityAttribValidation;
    				_dynEntityAttribValidation.IsLoaded = false;
                }
                return _dynEntityAttribValidation;
            }
            set
            {
                if (!ReferenceEquals(_dynEntityAttribValidation, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynEntityAttribValidation != null)
                    {
                        _dynEntityAttribValidation.CollectionChanged -= FixupDynEntityAttribValidation;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (DynEntityAttribValidation item in _dynEntityAttribValidation)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _dynEntityAttribValidation = value;
    				_dynEntityAttribValidation.IsLoaded = true;
                    if (_dynEntityAttribValidation != null)
                    {
                        _dynEntityAttribValidation.CollectionChanged += FixupDynEntityAttribValidation;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (DynEntityAttribValidation item in _dynEntityAttribValidation)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("DynEntityAttribValidation");
                }
            }
        }
        private TrackableCollection<DynEntityAttribValidation> _dynEntityAttribValidation;
    
        [DataMember]
        public TrackableCollection<ValidationOperandValue> ValidationOperandValue
        {
            get
            {
                if (_validationOperandValue == null)
                {
                    _validationOperandValue = new TrackableCollection<ValidationOperandValue>();
                    _validationOperandValue.CollectionChanged += FixupValidationOperandValue;
    				_validationOperandValue.IsLoaded = false;
                }
                return _validationOperandValue;
            }
            set
            {
                if (!ReferenceEquals(_validationOperandValue, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_validationOperandValue != null)
                    {
                        _validationOperandValue.CollectionChanged -= FixupValidationOperandValue;
                        // This is the principal end in an association that performs cascade deletes.
                        // Remove the cascade delete event handler for any entities in the current collection.
                        foreach (ValidationOperandValue item in _validationOperandValue)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _validationOperandValue = value;
    				_validationOperandValue.IsLoaded = true;
                    if (_validationOperandValue != null)
                    {
                        _validationOperandValue.CollectionChanged += FixupValidationOperandValue;
                        // This is the principal end in an association that performs cascade deletes.
                        // Add the cascade delete event handler for any entities that are already in the new collection.
                        foreach (ValidationOperandValue item in _validationOperandValue)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("ValidationOperandValue");
                }
            }
        }
        private TrackableCollection<ValidationOperandValue> _validationOperandValue;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            ValidationOperator = null;
            DataType.Clear();
            DynEntityAttribValidation.Clear();
            ValidationOperandValue.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupValidationOperator(ValidationOperator previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.ValidationList.Contains(this))
            {
                previousValue.ValidationList.Remove(this);
            }
    
            if (ValidationOperator != null)
            {
                if (!ValidationOperator.ValidationList.Contains(this))
                {
                    ValidationOperator.ValidationList.Add(this);
                }
    
                ValidationOperatorUid = ValidationOperator.ValidationOperatorUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("ValidationOperator")
                    && (ChangeTracker.OriginalValues["ValidationOperator"] == ValidationOperator))
                {
                    ChangeTracker.OriginalValues.Remove("ValidationOperator");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("ValidationOperator", previousValue);
                }
                if (ValidationOperator != null && !ValidationOperator.ChangeTracker.ChangeTrackingEnabled)
                {
                    ValidationOperator.StartTracking();
                }
            }
        }
    
        private void FixupDataType(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DataType item in e.NewItems)
                {
                    if (!item.ValidationList.Contains(this))
                    {
                        item.ValidationList.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DataType", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DataType item in e.OldItems)
                {
                    if (item.ValidationList.Contains(this))
                    {
                        item.ValidationList.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DataType", item);
                    }
                }
            }
        }
    
        private void FixupDynEntityAttribValidation(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynEntityAttribValidation item in e.NewItems)
                {
                    item.ValidationList = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynEntityAttribValidation", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynEntityAttribValidation item in e.OldItems)
                {
                    if (ReferenceEquals(item.ValidationList, this))
                    {
                        item.ValidationList = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynEntityAttribValidation", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }
    
        private void FixupValidationOperandValue(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (ValidationOperandValue item in e.NewItems)
                {
                    item.ValidationList = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("ValidationOperandValue", item);
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Update the event listener to refer to the new dependent.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ValidationOperandValue item in e.OldItems)
                {
                    if (ReferenceEquals(item.ValidationList, this))
                    {
                        item.ValidationList = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("ValidationOperandValue", item);
                        // Delete the dependent end of this identifying association. If the current state is Added,
                        // allow the relationship to be changed without causing the dependent to be deleted.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // This is the principal end in an association that performs cascade deletes.
                    // Remove the previous dependent from the event listener.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
