//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Context))]
    [KnownType(typeof(DynEntityConfig))]
    [KnownType(typeof(DynListItem))]
    public partial class DynEntityContextAttributesValues: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private long _id;
    
        [DataMember]
        public string StringValue
        {
            get { return _stringValue; }
            set
            {
                if (_stringValue != value)
                {
                    _stringValue = value;
                    OnPropertyChanged("StringValue");
                }
            }
        }
        private string _stringValue;
    
        [DataMember]
        public Nullable<System.DateTime> DateTimeValue
        {
            get { return _dateTimeValue; }
            set
            {
                if (_dateTimeValue != value)
                {
                    _dateTimeValue = value;
                    OnPropertyChanged("DateTimeValue");
                }
            }
        }
        private Nullable<System.DateTime> _dateTimeValue;
    
        [DataMember]
        public Nullable<double> NumericValue
        {
            get { return _numericValue; }
            set
            {
                if (_numericValue != value)
                {
                    _numericValue = value;
                    OnPropertyChanged("NumericValue");
                }
            }
        }
        private Nullable<double> _numericValue;
    
        [DataMember]
        public Nullable<long> DynamicListItemUid
        {
            get { return _dynamicListItemUid; }
            set
            {
                if (_dynamicListItemUid != value)
                {
                    ChangeTracker.RecordOriginalValue("DynamicListItemUid", _dynamicListItemUid);
                    if (!IsDeserializing)
                    {
                        if (DynListItem != null && DynListItem.DynListItemUid != value)
                        {
                            DynListItem = null;
                        }
                    }
                    _dynamicListItemUid = value;
                    OnPropertyChanged("DynamicListItemUid");
                }
            }
        }
        private Nullable<long> _dynamicListItemUid;
    
        [DataMember]
        public long ContextId
        {
            get { return _contextId; }
            set
            {
                if (_contextId != value)
                {
                    ChangeTracker.RecordOriginalValue("ContextId", _contextId);
                    if (!IsDeserializing)
                    {
                        if (Context != null && Context.ContextId != value)
                        {
                            Context = null;
                        }
                    }
                    _contextId = value;
                    OnPropertyChanged("ContextId");
                }
            }
        }
        private long _contextId;
    
        [DataMember]
        public long DynEntityUid
        {
            get { return _dynEntityUid; }
            set
            {
                if (_dynEntityUid != value)
                {
                    _dynEntityUid = value;
                    OnPropertyChanged("DynEntityUid");
                }
            }
        }
        private long _dynEntityUid;
    
        [DataMember]
        public long DynEntityConfigUid
        {
            get { return _dynEntityConfigUid; }
            set
            {
                if (_dynEntityConfigUid != value)
                {
                    ChangeTracker.RecordOriginalValue("DynEntityConfigUid", _dynEntityConfigUid);
                    if (!IsDeserializing)
                    {
                        if (DynEntityConfig != null && DynEntityConfig.DynEntityConfigUid != value)
                        {
                            DynEntityConfig = null;
                        }
                    }
                    _dynEntityConfigUid = value;
                    OnPropertyChanged("DynEntityConfigUid");
                }
            }
        }
        private long _dynEntityConfigUid;
    
        [DataMember]
        public bool IsActive
        {
            get { return _isActive; }
            set
            {
                if (_isActive != value)
                {
                    _isActive = value;
                    OnPropertyChanged("IsActive");
                }
            }
        }
        private bool _isActive;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public Context Context
        {
            get { return _context; }
            set
            {
                if (!ReferenceEquals(_context, value))
                {
                    var previousValue = _context;
                    _context = value;
                    FixupContext(previousValue);
                    OnNavigationPropertyChanged("Context");
                }
            }
        }
        private Context _context;
    
        [DataMember]
        public DynEntityConfig DynEntityConfig
        {
            get { return _dynEntityConfig; }
            set
            {
                if (!ReferenceEquals(_dynEntityConfig, value))
                {
                    var previousValue = _dynEntityConfig;
                    _dynEntityConfig = value;
                    FixupDynEntityConfig(previousValue);
                    OnNavigationPropertyChanged("DynEntityConfig");
                }
            }
        }
        private DynEntityConfig _dynEntityConfig;
    
        [DataMember]
        public DynListItem DynListItem
        {
            get { return _dynListItem; }
            set
            {
                if (!ReferenceEquals(_dynListItem, value))
                {
                    var previousValue = _dynListItem;
                    _dynListItem = value;
                    FixupDynListItem(previousValue);
                    OnNavigationPropertyChanged("DynListItem");
                }
            }
        }
        private DynListItem _dynListItem;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Context = null;
            DynEntityConfig = null;
            DynListItem = null;
        }

        #endregion

        #region Association Fixup
    
        private void FixupContext(Context previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynEntityContextAttributesValues.Contains(this))
            {
                previousValue.DynEntityContextAttributesValues.Remove(this);
            }
    
            if (Context != null)
            {
                if (!Context.DynEntityContextAttributesValues.Contains(this))
                {
                    Context.DynEntityContextAttributesValues.Add(this);
                }
    
                ContextId = Context.ContextId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Context")
                    && (ChangeTracker.OriginalValues["Context"] == Context))
                {
                    ChangeTracker.OriginalValues.Remove("Context");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Context", previousValue);
                }
                if (Context != null && !Context.ChangeTracker.ChangeTrackingEnabled)
                {
                    Context.StartTracking();
                }
            }
        }
    
        private void FixupDynEntityConfig(DynEntityConfig previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynEntityContextAttributesValues.Contains(this))
            {
                previousValue.DynEntityContextAttributesValues.Remove(this);
            }
    
            if (DynEntityConfig != null)
            {
                if (!DynEntityConfig.DynEntityContextAttributesValues.Contains(this))
                {
                    DynEntityConfig.DynEntityContextAttributesValues.Add(this);
                }
    
                DynEntityConfigUid = DynEntityConfig.DynEntityConfigUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynEntityConfig")
                    && (ChangeTracker.OriginalValues["DynEntityConfig"] == DynEntityConfig))
                {
                    ChangeTracker.OriginalValues.Remove("DynEntityConfig");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynEntityConfig", previousValue);
                }
                if (DynEntityConfig != null && !DynEntityConfig.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynEntityConfig.StartTracking();
                }
            }
        }
    
        private void FixupDynListItem(DynListItem previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynEntityContextAttributesValues.Contains(this))
            {
                previousValue.DynEntityContextAttributesValues.Remove(this);
            }
    
            if (DynListItem != null)
            {
                if (!DynListItem.DynEntityContextAttributesValues.Contains(this))
                {
                    DynListItem.DynEntityContextAttributesValues.Add(this);
                }
    
                DynamicListItemUid = DynListItem.DynListItemUid;
            }
            else if (!skipKeys)
            {
                DynamicListItemUid = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynListItem")
                    && (ChangeTracker.OriginalValues["DynListItem"] == DynListItem))
                {
                    ChangeTracker.OriginalValues.Remove("DynListItem");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynListItem", previousValue);
                }
                if (DynListItem != null && !DynListItem.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynListItem.StartTracking();
                }
            }
        }

        #endregion

    }
}
