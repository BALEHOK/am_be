//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DynEntityConfig))]
    [KnownType(typeof(AssetTypeScreen))]
    [KnownType(typeof(AttributePanelAttribute))]
    public partial class AttributePanel: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long AttributePanelUid
        {
            get { return _attributePanelUid; }
            set
            {
                if (_attributePanelUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'AttributePanelUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _attributePanelUid = value;
                    OnPropertyChanged("AttributePanelUid");
                }
            }
        }
        private long _attributePanelUid;
    
        [DataMember]
        public long AttributePanelId
        {
            get { return _attributePanelId; }
            set
            {
                if (_attributePanelId != value)
                {
                    _attributePanelId = value;
                    OnPropertyChanged("AttributePanelId");
                }
            }
        }
        private long _attributePanelId;
    
        [DataMember]
        public long DynEntityConfigUId
        {
            get { return _dynEntityConfigUId; }
            set
            {
                if (_dynEntityConfigUId != value)
                {
                    ChangeTracker.RecordOriginalValue("DynEntityConfigUId", _dynEntityConfigUId);
                    if (!IsDeserializing)
                    {
                        if (DynEntityConfig != null && DynEntityConfig.DynEntityConfigUid != value)
                        {
                            DynEntityConfig = null;
                        }
                    }
                    _dynEntityConfigUId = value;
                    OnPropertyChanged("DynEntityConfigUId");
                }
            }
        }
        private long _dynEntityConfigUId;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string NameTranslationId
        {
            get { return _nameTranslationId; }
            set
            {
                if (_nameTranslationId != value)
                {
                    _nameTranslationId = value;
                    OnPropertyChanged("NameTranslationId");
                }
            }
        }
        private string _nameTranslationId;
    
        [DataMember]
        public byte DisplayOrder
        {
            get { return _displayOrder; }
            set
            {
                if (_displayOrder != value)
                {
                    _displayOrder = value;
                    OnPropertyChanged("DisplayOrder");
                }
            }
        }
        private byte _displayOrder;
    
        [DataMember]
        public string Description
        {
            get { return _description; }
            set
            {
                if (_description != value)
                {
                    _description = value;
                    OnPropertyChanged("Description");
                }
            }
        }
        private string _description;
    
        [DataMember]
        public string HeaderLabel
        {
            get { return _headerLabel; }
            set
            {
                if (_headerLabel != value)
                {
                    _headerLabel = value;
                    OnPropertyChanged("HeaderLabel");
                }
            }
        }
        private string _headerLabel;
    
        [DataMember]
        public string HeaderLabelTranslationId
        {
            get { return _headerLabelTranslationId; }
            set
            {
                if (_headerLabelTranslationId != value)
                {
                    _headerLabelTranslationId = value;
                    OnPropertyChanged("HeaderLabelTranslationId");
                }
            }
        }
        private string _headerLabelTranslationId;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public Nullable<long> ScreenId
        {
            get { return _screenId; }
            set
            {
                if (_screenId != value)
                {
                    ChangeTracker.RecordOriginalValue("ScreenId", _screenId);
                    if (!IsDeserializing)
                    {
                        if (AssetTypeScreen != null && AssetTypeScreen.ScreenId != value)
                        {
                            AssetTypeScreen = null;
                        }
                    }
                    _screenId = value;
                    OnPropertyChanged("ScreenId");
                }
            }
        }
        private Nullable<long> _screenId;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DynEntityConfig DynEntityConfig
        {
            get { return _dynEntityConfig; }
            set
            {
                if (!ReferenceEquals(_dynEntityConfig, value))
                {
                    var previousValue = _dynEntityConfig;
                    _dynEntityConfig = value;
                    FixupDynEntityConfig(previousValue);
                    OnNavigationPropertyChanged("DynEntityConfig");
                }
            }
        }
        private DynEntityConfig _dynEntityConfig;
    
        [DataMember]
        public AssetTypeScreen AssetTypeScreen
        {
            get { return _assetTypeScreen; }
            set
            {
                if (!ReferenceEquals(_assetTypeScreen, value))
                {
                    var previousValue = _assetTypeScreen;
                    _assetTypeScreen = value;
                    FixupAssetTypeScreen(previousValue);
                    OnNavigationPropertyChanged("AssetTypeScreen");
                }
            }
        }
        private AssetTypeScreen _assetTypeScreen;
    
        [DataMember]
        public TrackableCollection<AttributePanelAttribute> AttributePanelAttribute
        {
            get
            {
                if (_attributePanelAttribute == null)
                {
                    _attributePanelAttribute = new TrackableCollection<AttributePanelAttribute>();
                    _attributePanelAttribute.CollectionChanged += FixupAttributePanelAttribute;
    				_attributePanelAttribute.IsLoaded = false;
                }
                return _attributePanelAttribute;
            }
            set
            {
                if (!ReferenceEquals(_attributePanelAttribute, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_attributePanelAttribute != null)
                    {
                        _attributePanelAttribute.CollectionChanged -= FixupAttributePanelAttribute;
                    }
                    _attributePanelAttribute = value;
    				_attributePanelAttribute.IsLoaded = true;
                    if (_attributePanelAttribute != null)
                    {
                        _attributePanelAttribute.CollectionChanged += FixupAttributePanelAttribute;
                    }
                    OnNavigationPropertyChanged("AttributePanelAttribute");
                }
            }
        }
        private TrackableCollection<AttributePanelAttribute> _attributePanelAttribute;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DynEntityConfig = null;
            AssetTypeScreen = null;
            AttributePanelAttribute.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupDynEntityConfig(DynEntityConfig previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AttributePanel.Contains(this))
            {
                previousValue.AttributePanel.Remove(this);
            }
    
            if (DynEntityConfig != null)
            {
                if (!DynEntityConfig.AttributePanel.Contains(this))
                {
                    DynEntityConfig.AttributePanel.Add(this);
                }
    
                DynEntityConfigUId = DynEntityConfig.DynEntityConfigUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DynEntityConfig")
                    && (ChangeTracker.OriginalValues["DynEntityConfig"] == DynEntityConfig))
                {
                    ChangeTracker.OriginalValues.Remove("DynEntityConfig");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DynEntityConfig", previousValue);
                }
                if (DynEntityConfig != null && !DynEntityConfig.ChangeTracker.ChangeTrackingEnabled)
                {
                    DynEntityConfig.StartTracking();
                }
            }
        }
    
        private void FixupAssetTypeScreen(AssetTypeScreen previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.AttributePanel.Contains(this))
            {
                previousValue.AttributePanel.Remove(this);
            }
    
            if (AssetTypeScreen != null)
            {
                if (!AssetTypeScreen.AttributePanel.Contains(this))
                {
                    AssetTypeScreen.AttributePanel.Add(this);
                }
    
                ScreenId = AssetTypeScreen.ScreenId;
            }
            else if (!skipKeys)
            {
                ScreenId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("AssetTypeScreen")
                    && (ChangeTracker.OriginalValues["AssetTypeScreen"] == AssetTypeScreen))
                {
                    ChangeTracker.OriginalValues.Remove("AssetTypeScreen");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("AssetTypeScreen", previousValue);
                }
                if (AssetTypeScreen != null && !AssetTypeScreen.ChangeTracker.ChangeTrackingEnabled)
                {
                    AssetTypeScreen.StartTracking();
                }
            }
        }
    
        private void FixupAttributePanelAttribute(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (AttributePanelAttribute item in e.NewItems)
                {
                    item.AttributePanel = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AttributePanelAttribute", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (AttributePanelAttribute item in e.OldItems)
                {
                    if (ReferenceEquals(item.AttributePanel, this))
                    {
                        item.AttributePanel = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AttributePanelAttribute", item);
                    }
                }
            }
        }

        #endregion

    }
}
