//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace AppFramework.Entities
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(DataType))]
    [KnownType(typeof(DynEntityAttribConfig))]
    [KnownType(typeof(DynListItem))]
    public partial class DynList: IObjectWithChangeTracker, INotifyPropertyChanged, IDataEntity
    {
        #region Primitive Properties
    
        [DataMember]
        public long DynListUid
        {
            get { return _dynListUid; }
            set
            {
                if (_dynListUid != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'DynListUid' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _dynListUid = value;
                    OnPropertyChanged("DynListUid");
                }
            }
        }
        private long _dynListUid;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string NameTranslationId
        {
            get { return _nameTranslationId; }
            set
            {
                if (_nameTranslationId != value)
                {
                    _nameTranslationId = value;
                    OnPropertyChanged("NameTranslationId");
                }
            }
        }
        private string _nameTranslationId;
    
        [DataMember]
        public long DataTypeId
        {
            get { return _dataTypeId; }
            set
            {
                if (_dataTypeId != value)
                {
                    ChangeTracker.RecordOriginalValue("DataTypeId", _dataTypeId);
                    if (!IsDeserializing)
                    {
                        if (DataType != null && DataType.DataTypeUid != value)
                        {
                            DataType = null;
                        }
                    }
                    _dataTypeId = value;
                    OnPropertyChanged("DataTypeId");
                }
            }
        }
        private long _dataTypeId;
    
        [DataMember]
        public string Label
        {
            get { return _label; }
            set
            {
                if (_label != value)
                {
                    _label = value;
                    OnPropertyChanged("Label");
                }
            }
        }
        private string _label;
    
        [DataMember]
        public string LabelTranslationId
        {
            get { return _labelTranslationId; }
            set
            {
                if (_labelTranslationId != value)
                {
                    _labelTranslationId = value;
                    OnPropertyChanged("LabelTranslationId");
                }
            }
        }
        private string _labelTranslationId;
    
        [DataMember]
        public string Comment
        {
            get { return _comment; }
            set
            {
                if (_comment != value)
                {
                    _comment = value;
                    OnPropertyChanged("Comment");
                }
            }
        }
        private string _comment;
    
        [DataMember]
        public long UpdateUserId
        {
            get { return _updateUserId; }
            set
            {
                if (_updateUserId != value)
                {
                    _updateUserId = value;
                    OnPropertyChanged("UpdateUserId");
                }
            }
        }
        private long _updateUserId;
    
        [DataMember]
        public System.DateTime UpdateDate
        {
            get { return _updateDate; }
            set
            {
                if (_updateDate != value)
                {
                    _updateDate = value;
                    OnPropertyChanged("UpdateDate");
                }
            }
        }
        private System.DateTime _updateDate;
    
        [DataMember]
        public bool Active
        {
            get { return _active; }
            set
            {
                if (_active != value)
                {
                    _active = value;
                    OnPropertyChanged("Active");
                }
            }
        }
        private bool _active;

        #endregion

        #region Navigation Properties
    
        [DataMember]
        public DataType DataType
        {
            get { return _dataType; }
            set
            {
                if (!ReferenceEquals(_dataType, value))
                {
                    var previousValue = _dataType;
                    _dataType = value;
                    FixupDataType(previousValue);
                    OnNavigationPropertyChanged("DataType");
                }
            }
        }
        private DataType _dataType;
    
        [DataMember]
        public TrackableCollection<DynEntityAttribConfig> DynEntityAttribConfigs
        {
            get
            {
                if (_dynEntityAttribConfigs == null)
                {
                    _dynEntityAttribConfigs = new TrackableCollection<DynEntityAttribConfig>();
                    _dynEntityAttribConfigs.CollectionChanged += FixupDynEntityAttribConfigs;
    				_dynEntityAttribConfigs.IsLoaded = false;
                }
                return _dynEntityAttribConfigs;
            }
            set
            {
                if (!ReferenceEquals(_dynEntityAttribConfigs, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynEntityAttribConfigs != null)
                    {
                        _dynEntityAttribConfigs.CollectionChanged -= FixupDynEntityAttribConfigs;
                    }
                    _dynEntityAttribConfigs = value;
    				_dynEntityAttribConfigs.IsLoaded = true;
                    if (_dynEntityAttribConfigs != null)
                    {
                        _dynEntityAttribConfigs.CollectionChanged += FixupDynEntityAttribConfigs;
                    }
                    OnNavigationPropertyChanged("DynEntityAttribConfigs");
                }
            }
        }
        private TrackableCollection<DynEntityAttribConfig> _dynEntityAttribConfigs;
    
        [DataMember]
        public TrackableCollection<DynListItem> DynListItems
        {
            get
            {
                if (_dynListItems == null)
                {
                    _dynListItems = new TrackableCollection<DynListItem>();
                    _dynListItems.CollectionChanged += FixupDynListItems;
    				_dynListItems.IsLoaded = false;
                }
                return _dynListItems;
            }
            set
            {
                if (!ReferenceEquals(_dynListItems, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_dynListItems != null)
                    {
                        _dynListItems.CollectionChanged -= FixupDynListItems;
                    }
                    _dynListItems = value;
    				_dynListItems.IsLoaded = true;
                    if (_dynListItems != null)
                    {
                        _dynListItems.CollectionChanged += FixupDynListItems;
                    }
                    OnNavigationPropertyChanged("DynListItems");
                }
            }
        }
        private TrackableCollection<DynListItem> _dynListItems;
    
        [DataMember]
        public TrackableCollection<DynListItem> AssociatedDynListItems
        {
            get
            {
                if (_associatedDynListItems == null)
                {
                    _associatedDynListItems = new TrackableCollection<DynListItem>();
                    _associatedDynListItems.CollectionChanged += FixupAssociatedDynListItems;
    				_associatedDynListItems.IsLoaded = false;
                }
                return _associatedDynListItems;
            }
            set
            {
                if (!ReferenceEquals(_associatedDynListItems, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_associatedDynListItems != null)
                    {
                        _associatedDynListItems.CollectionChanged -= FixupAssociatedDynListItems;
                    }
                    _associatedDynListItems = value;
    				_associatedDynListItems.IsLoaded = true;
                    if (_associatedDynListItems != null)
                    {
                        _associatedDynListItems.CollectionChanged += FixupAssociatedDynListItems;
                    }
                    OnNavigationPropertyChanged("AssociatedDynListItems");
                }
            }
        }
        private TrackableCollection<DynListItem> _associatedDynListItems;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            DataType = null;
            DynEntityAttribConfigs.Clear();
            DynListItems.Clear();
            AssociatedDynListItems.Clear();
        }

        #endregion

        #region Association Fixup
    
        private void FixupDataType(DataType previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.DynLists.Contains(this))
            {
                previousValue.DynLists.Remove(this);
            }
    
            if (DataType != null)
            {
                if (!DataType.DynLists.Contains(this))
                {
                    DataType.DynLists.Add(this);
                }
    
                DataTypeId = DataType.DataTypeUid;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("DataType")
                    && (ChangeTracker.OriginalValues["DataType"] == DataType))
                {
                    ChangeTracker.OriginalValues.Remove("DataType");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("DataType", previousValue);
                }
                if (DataType != null && !DataType.ChangeTracker.ChangeTrackingEnabled)
                {
                    DataType.StartTracking();
                }
            }
        }
    
        private void FixupDynEntityAttribConfigs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynEntityAttribConfig item in e.NewItems)
                {
                    item.DynList = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynEntityAttribConfigs", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynEntityAttribConfig item in e.OldItems)
                {
                    if (ReferenceEquals(item.DynList, this))
                    {
                        item.DynList = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynEntityAttribConfigs", item);
                    }
                }
            }
        }
    
        private void FixupDynListItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynListItem item in e.NewItems)
                {
                    item.DynList = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("DynListItems", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynListItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.DynList, this))
                    {
                        item.DynList = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("DynListItems", item);
                    }
                }
            }
        }
    
        private void FixupAssociatedDynListItems(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (DynListItem item in e.NewItems)
                {
                    item.AssociatedDynList = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("AssociatedDynListItems", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DynListItem item in e.OldItems)
                {
                    if (ReferenceEquals(item.AssociatedDynList, this))
                    {
                        item.AssociatedDynList = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("AssociatedDynListItems", item);
                    }
                }
            }
        }

        #endregion

    }
}
