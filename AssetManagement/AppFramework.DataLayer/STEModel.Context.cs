//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data.Common;
using System.Data.EntityClient;
using System.Data.Metadata.Edm;
using System.Data.Objects.DataClasses;
using System.Data.Objects;
using System.Data;
using System.Diagnostics;
using System.Globalization;
using System.Linq;
using AppFramework.Entities;

namespace AppFramework.DataLayer
{
    public partial class DataEntities : ObjectContext
    {
        public const string ConnectionString = "name=DataEntities";
        public const string ContainerName = "DataEntities";
    
        #region Constructors
    
        public DataEntities()
            : base(ConnectionString, ContainerName)
        {
            Initialize();
        }
    
        public DataEntities(string connectionString)
            : base(connectionString, ContainerName)
        {
            Initialize();
        }
    
        public DataEntities(EntityConnection connection)
            : base(connection, ContainerName)
        {
            Initialize();
        }
    
        private void Initialize()
        {
            // Creating proxies requires the use of the ProxyDataContractResolver and
            // may allow lazy loading which can expand the loaded graph during serialization.
            ContextOptions.ProxyCreationEnabled = false;
            ObjectMaterialized += new ObjectMaterializedEventHandler(HandleObjectMaterialized);
        }
    
        private void HandleObjectMaterialized(object sender, ObjectMaterializedEventArgs e)
        {
            var entity = e.Entity as IObjectWithChangeTracker;
            if (entity != null)
            {
                bool changeTrackingEnabled = entity.ChangeTracker.ChangeTrackingEnabled;
                try
                {
                    entity.MarkAsUnchanged();
                }
                finally
                {
                    entity.ChangeTracker.ChangeTrackingEnabled = changeTrackingEnabled;
                }
                this.StoreReferenceKeyValues(entity);
            }
        }
    
        #endregion
    
        #region ObjectSet Properties
    
        public ObjectSet<AppSettings> AppSettings
        {
            get { return _appSettings  ?? (_appSettings = CreateObjectSet<AppSettings>("AppSettings")); }
        }
        private ObjectSet<AppSettings> _appSettings;
    
        public ObjectSet<CheckedOut> CheckedOut
        {
            get { return _checkedOut  ?? (_checkedOut = CreateObjectSet<CheckedOut>("CheckedOut")); }
        }
        private ObjectSet<CheckedOut> _checkedOut;
    
        public ObjectSet<Context> Context
        {
            get { return _context  ?? (_context = CreateObjectSet<Context>("Context")); }
        }
        private ObjectSet<Context> _context;
    
        public ObjectSet<DataType> DataType
        {
            get { return _dataType  ?? (_dataType = CreateObjectSet<DataType>("DataType")); }
        }
        private ObjectSet<DataType> _dataType;
    
        public ObjectSet<DynEntityConfigTaxonomy> DynEntityConfigTaxonomy
        {
            get { return _dynEntityConfigTaxonomy  ?? (_dynEntityConfigTaxonomy = CreateObjectSet<DynEntityConfigTaxonomy>("DynEntityConfigTaxonomy")); }
        }
        private ObjectSet<DynEntityConfigTaxonomy> _dynEntityConfigTaxonomy;
    
        public ObjectSet<DynEntityIndex> DynEntityIndex
        {
            get { return _dynEntityIndex  ?? (_dynEntityIndex = CreateObjectSet<DynEntityIndex>("DynEntityIndex")); }
        }
        private ObjectSet<DynEntityIndex> _dynEntityIndex;
    
        public ObjectSet<DynEntityType> DynEntityType
        {
            get { return _dynEntityType  ?? (_dynEntityType = CreateObjectSet<DynEntityType>("DynEntityType")); }
        }
        private ObjectSet<DynEntityType> _dynEntityType;
    
        public ObjectSet<DynListValue> DynListValue
        {
            get { return _dynListValue  ?? (_dynListValue = CreateObjectSet<DynListValue>("DynListValue")); }
        }
        private ObjectSet<DynListValue> _dynListValue;
    
        public ObjectSet<ImportExport> ImportExport
        {
            get { return _importExport  ?? (_importExport = CreateObjectSet<ImportExport>("ImportExport")); }
        }
        private ObjectSet<ImportExport> _importExport;
    
        public ObjectSet<InventoryScan> InventoryScan
        {
            get { return _inventoryScan  ?? (_inventoryScan = CreateObjectSet<InventoryScan>("InventoryScan")); }
        }
        private ObjectSet<InventoryScan> _inventoryScan;
    
        public ObjectSet<InventoryScanItem> InventoryScanItem
        {
            get { return _inventoryScanItem  ?? (_inventoryScanItem = CreateObjectSet<InventoryScanItem>("InventoryScanItem")); }
        }
        private ObjectSet<InventoryScanItem> _inventoryScanItem;
    
        public ObjectSet<Languages> Languages
        {
            get { return _languages  ?? (_languages = CreateObjectSet<Languages>("Languages")); }
        }
        private ObjectSet<Languages> _languages;
    
        public ObjectSet<LibraryTransactions> LibraryTransactions
        {
            get { return _libraryTransactions  ?? (_libraryTransactions = CreateObjectSet<LibraryTransactions>("LibraryTransactions")); }
        }
        private ObjectSet<LibraryTransactions> _libraryTransactions;
    
        public ObjectSet<LibraryTransactionType> LibraryTransactionType
        {
            get { return _libraryTransactionType  ?? (_libraryTransactionType = CreateObjectSet<LibraryTransactionType>("LibraryTransactionType")); }
        }
        private ObjectSet<LibraryTransactionType> _libraryTransactionType;
    
        public ObjectSet<MeasureUnit> MeasureUnit
        {
            get { return _measureUnit  ?? (_measureUnit = CreateObjectSet<MeasureUnit>("MeasureUnit")); }
        }
        private ObjectSet<MeasureUnit> _measureUnit;
    
        public ObjectSet<MultipleAssetsActive> MultipleAssetsActive
        {
            get { return _multipleAssetsActive  ?? (_multipleAssetsActive = CreateObjectSet<MultipleAssetsActive>("MultipleAssetsActive")); }
        }
        private ObjectSet<MultipleAssetsActive> _multipleAssetsActive;
    
        public ObjectSet<MultipleAssetsHistory> MultipleAssetsHistory
        {
            get { return _multipleAssetsHistory  ?? (_multipleAssetsHistory = CreateObjectSet<MultipleAssetsHistory>("MultipleAssetsHistory")); }
        }
        private ObjectSet<MultipleAssetsHistory> _multipleAssetsHistory;
    
        public ObjectSet<Place> Place
        {
            get { return _place  ?? (_place = CreateObjectSet<Place>("Place")); }
        }
        private ObjectSet<Place> _place;
    
        public ObjectSet<Place2Zip> Place2Zip
        {
            get { return _place2Zip  ?? (_place2Zip = CreateObjectSet<Place2Zip>("Place2Zip")); }
        }
        private ObjectSet<Place2Zip> _place2Zip;
    
        public ObjectSet<PredefinedAsset> PredefinedAsset
        {
            get { return _predefinedAsset  ?? (_predefinedAsset = CreateObjectSet<PredefinedAsset>("PredefinedAsset")); }
        }
        private ObjectSet<PredefinedAsset> _predefinedAsset;
    
        public ObjectSet<PredefinedAttributes> PredefinedAttributes
        {
            get { return _predefinedAttributes  ?? (_predefinedAttributes = CreateObjectSet<PredefinedAttributes>("PredefinedAttributes")); }
        }
        private ObjectSet<PredefinedAttributes> _predefinedAttributes;
    
        public ObjectSet<ReportField> ReportField
        {
            get { return _reportField  ?? (_reportField = CreateObjectSet<ReportField>("ReportField")); }
        }
        private ObjectSet<ReportField> _reportField;
    
        public ObjectSet<Reservation> Reservation
        {
            get { return _reservation  ?? (_reservation = CreateObjectSet<Reservation>("Reservation")); }
        }
        private ObjectSet<Reservation> _reservation;
    
        public ObjectSet<Rights> Rights
        {
            get { return _rights  ?? (_rights = CreateObjectSet<Rights>("Rights")); }
        }
        private ObjectSet<Rights> _rights;
    
        public ObjectSet<SearchOperators> SearchOperators
        {
            get { return _searchOperators  ?? (_searchOperators = CreateObjectSet<SearchOperators>("SearchOperators")); }
        }
        private ObjectSet<SearchOperators> _searchOperators;
    
        public ObjectSet<StringResources> StringResources
        {
            get { return _stringResources  ?? (_stringResources = CreateObjectSet<StringResources>("StringResources")); }
        }
        private ObjectSet<StringResources> _stringResources;
    
        public ObjectSet<Taxonomy> Taxonomy
        {
            get { return _taxonomy  ?? (_taxonomy = CreateObjectSet<Taxonomy>("Taxonomy")); }
        }
        private ObjectSet<Taxonomy> _taxonomy;
    
        public ObjectSet<TransactionType> TransactionType
        {
            get { return _transactionType  ?? (_transactionType = CreateObjectSet<TransactionType>("TransactionType")); }
        }
        private ObjectSet<TransactionType> _transactionType;
    
        public ObjectSet<UserInRole> UserInRole
        {
            get { return _userInRole  ?? (_userInRole = CreateObjectSet<UserInRole>("UserInRole")); }
        }
        private ObjectSet<UserInRole> _userInRole;
    
        public ObjectSet<ValidationList> ValidationList
        {
            get { return _validationList  ?? (_validationList = CreateObjectSet<ValidationList>("ValidationList")); }
        }
        private ObjectSet<ValidationList> _validationList;
    
        public ObjectSet<ValidationOperator> ValidationOperator
        {
            get { return _validationOperator  ?? (_validationOperator = CreateObjectSet<ValidationOperator>("ValidationOperator")); }
        }
        private ObjectSet<ValidationOperator> _validationOperator;
    
        public ObjectSet<ZipCode> ZipCode
        {
            get { return _zipCode  ?? (_zipCode = CreateObjectSet<ZipCode>("ZipCode")); }
        }
        private ObjectSet<ZipCode> _zipCode;
    
        public ObjectSet<DynEntityConfig> DynEntityConfig
        {
            get { return _dynEntityConfig  ?? (_dynEntityConfig = CreateObjectSet<DynEntityConfig>("DynEntityConfig")); }
        }
        private ObjectSet<DynEntityConfig> _dynEntityConfig;
    
        public ObjectSet<DynEntityAttribValidation> DynEntityAttribValidation
        {
            get { return _dynEntityAttribValidation  ?? (_dynEntityAttribValidation = CreateObjectSet<DynEntityAttribValidation>("DynEntityAttribValidation")); }
        }
        private ObjectSet<DynEntityAttribValidation> _dynEntityAttribValidation;
    
        public ObjectSet<TaxonomyItem> TaxonomyItem
        {
            get { return _taxonomyItem  ?? (_taxonomyItem = CreateObjectSet<TaxonomyItem>("TaxonomyItem")); }
        }
        private ObjectSet<TaxonomyItem> _taxonomyItem;
    
        public ObjectSet<DynListItem> DynListItem
        {
            get { return _dynListItem  ?? (_dynListItem = CreateObjectSet<DynListItem>("DynListItem")); }
        }
        private ObjectSet<DynListItem> _dynListItem;
    
        public ObjectSet<ValidationOperandValue> ValidationOperandValue
        {
            get { return _validationOperandValue  ?? (_validationOperandValue = CreateObjectSet<ValidationOperandValue>("ValidationOperandValue")); }
        }
        private ObjectSet<ValidationOperandValue> _validationOperandValue;
    
        public ObjectSet<Task> Task
        {
            get { return _task  ?? (_task = CreateObjectSet<Task>("Task")); }
        }
        private ObjectSet<Task> _task;
    
        public ObjectSet<Report> Report
        {
            get { return _report  ?? (_report = CreateObjectSet<Report>("Report")); }
        }
        private ObjectSet<Report> _report;
    
        public ObjectSet<AttributePanel> AttributePanel
        {
            get { return _attributePanel  ?? (_attributePanel = CreateObjectSet<AttributePanel>("AttributePanel")); }
        }
        private ObjectSet<AttributePanel> _attributePanel;
    
        public ObjectSet<AssetTypeScreen> AssetTypeScreen
        {
            get { return _assetTypeScreen  ?? (_assetTypeScreen = CreateObjectSet<AssetTypeScreen>("AssetTypeScreen")); }
        }
        private ObjectSet<AssetTypeScreen> _assetTypeScreen;
    
        public ObjectSet<DynEntityAttribScreens> DynEntityAttribScreens
        {
            get { return _dynEntityAttribScreens  ?? (_dynEntityAttribScreens = CreateObjectSet<DynEntityAttribScreens>("DynEntityAttribScreens")); }
        }
        private ObjectSet<DynEntityAttribScreens> _dynEntityAttribScreens;
    
        public ObjectSet<ValidationOperand> ValidationOperand
        {
            get { return _validationOperand  ?? (_validationOperand = CreateObjectSet<ValidationOperand>("ValidationOperand")); }
        }
        private ObjectSet<ValidationOperand> _validationOperand;
    
        public ObjectSet<AttributePanelAttribute> AttributePanelAttribute
        {
            get { return _attributePanelAttribute  ?? (_attributePanelAttribute = CreateObjectSet<AttributePanelAttribute>("AttributePanelAttribute")); }
        }
        private ObjectSet<AttributePanelAttribute> _attributePanelAttribute;
    
        public ObjectSet<DeletedEntity> DeletedEntities
        {
            get { return _deletedEntities  ?? (_deletedEntities = CreateObjectSet<DeletedEntity>("DeletedEntities")); }
        }
        private ObjectSet<DeletedEntity> _deletedEntities;
    
        public ObjectSet<DefaultValue> DefaultValue
        {
            get { return _defaultValue  ?? (_defaultValue = CreateObjectSet<DefaultValue>("DefaultValue")); }
        }
        private ObjectSet<DefaultValue> _defaultValue;
    
        public ObjectSet<AssetsTaxonomies> AssetsTaxonomies
        {
            get { return _assetsTaxonomies  ?? (_assetsTaxonomies = CreateObjectSet<AssetsTaxonomies>("AssetsTaxonomies")); }
        }
        private ObjectSet<AssetsTaxonomies> _assetsTaxonomies;
    
        public ObjectSet<TaskRights> TaskRights
        {
            get { return _taskRights  ?? (_taskRights = CreateObjectSet<TaskRights>("TaskRights")); }
        }
        private ObjectSet<TaskRights> _taskRights;
    
        public ObjectSet<DynEntityContextAttributesValues> DynEntityContextAttributesValues
        {
            get { return _dynEntityContextAttributesValues  ?? (_dynEntityContextAttributesValues = CreateObjectSet<DynEntityContextAttributesValues>("DynEntityContextAttributesValues")); }
        }
        private ObjectSet<DynEntityContextAttributesValues> _dynEntityContextAttributesValues;
    
        public ObjectSet<IndexActiveDynEntities> IndexActiveDynEntities
        {
            get { return _indexActiveDynEntities  ?? (_indexActiveDynEntities = CreateObjectSet<IndexActiveDynEntities>("IndexActiveDynEntities")); }
        }
        private ObjectSet<IndexActiveDynEntities> _indexActiveDynEntities;
    
        public ObjectSet<IndexHistoryDynEntities> IndexHistoryDynEntities
        {
            get { return _indexHistoryDynEntities  ?? (_indexHistoryDynEntities = CreateObjectSet<IndexHistoryDynEntities>("IndexHistoryDynEntities")); }
        }
        private ObjectSet<IndexHistoryDynEntities> _indexHistoryDynEntities;
    
        public ObjectSet<BatchAction> BatchActions
        {
            get { return _batchActions  ?? (_batchActions = CreateObjectSet<BatchAction>("BatchActions")); }
        }
        private ObjectSet<BatchAction> _batchActions;
    
        public ObjectSet<DynEntityTransaction> DynEntityTransactions
        {
            get { return _dynEntityTransactions  ?? (_dynEntityTransactions = CreateObjectSet<DynEntityTransaction>("DynEntityTransactions")); }
        }
        private ObjectSet<DynEntityTransaction> _dynEntityTransactions;
    
        public ObjectSet<DynEntityAttribConfig> DynEntityAttribConfigs
        {
            get { return _dynEntityAttribConfigs  ?? (_dynEntityAttribConfigs = CreateObjectSet<DynEntityAttribConfig>("DynEntityAttribConfigs")); }
        }
        private ObjectSet<DynEntityAttribConfig> _dynEntityAttribConfigs;
    
        public ObjectSet<DynList> DynLists
        {
            get { return _dynLists  ?? (_dynLists = CreateObjectSet<DynList>("DynLists")); }
        }
        private ObjectSet<DynList> _dynLists;
    
        public ObjectSet<BatchJob> BatchJobs
        {
            get { return _batchJobs  ?? (_batchJobs = CreateObjectSet<BatchJob>("BatchJobs")); }
        }
        private ObjectSet<BatchJob> _batchJobs;
    
        public ObjectSet<BatchSchedule> BatchSchedules
        {
            get { return _batchSchedules  ?? (_batchSchedules = CreateObjectSet<BatchSchedule>("BatchSchedules")); }
        }
        private ObjectSet<BatchSchedule> _batchSchedules;
    
        public ObjectSet<ReportLayout> ReportLayouts
        {
            get { return _reportLayouts  ?? (_reportLayouts = CreateObjectSet<ReportLayout>("ReportLayouts")); }
        }
        private ObjectSet<ReportLayout> _reportLayouts;
    
        public ObjectSet<SearchTracking> SearchTracking
        {
            get { return _searchTracking  ?? (_searchTracking = CreateObjectSet<SearchTracking>("SearchTracking")); }
        }
        private ObjectSet<SearchTracking> _searchTracking;
    
        public ObjectSet<ScreenLayout> ScreenLayout
        {
            get { return _screenLayout  ?? (_screenLayout = CreateObjectSet<ScreenLayout>("ScreenLayout")); }
        }
        private ObjectSet<ScreenLayout> _screenLayout;
    
        public ObjectSet<SearchQuery> SearchQueries
        {
            get { return _searchQueries  ?? (_searchQueries = CreateObjectSet<SearchQuery>("SearchQueries")); }
        }
        private ObjectSet<SearchQuery> _searchQueries;
    
        public ObjectSet<SearchQueryAttribute> SearchQueryAttributes
        {
            get { return _searchQueryAttributes  ?? (_searchQueryAttributes = CreateObjectSet<SearchQueryAttribute>("SearchQueryAttributes")); }
        }
        private ObjectSet<SearchQueryAttribute> _searchQueryAttributes;

        #endregion

        #region Function Imports
     
     
        public void AlterTable(string table_name, string column_name, string column_description, string column_default, Nullable<bool> isAdding)     
     
        { 
     
     
            ObjectParameter table_nameParameter; 
     
            if (table_name != null) 
            { 
                table_nameParameter = new ObjectParameter("table_name", table_name); 
            } 
            else 
            { 
                table_nameParameter = new ObjectParameter("table_name", typeof(string)); 
            } 
     
     
            ObjectParameter column_nameParameter; 
     
            if (column_name != null) 
            { 
                column_nameParameter = new ObjectParameter("column_name", column_name); 
            } 
            else 
            { 
                column_nameParameter = new ObjectParameter("column_name", typeof(string)); 
            } 
     
     
            ObjectParameter column_descriptionParameter; 
     
            if (column_description != null) 
            { 
                column_descriptionParameter = new ObjectParameter("column_description", column_description); 
            } 
            else 
            { 
                column_descriptionParameter = new ObjectParameter("column_description", typeof(string)); 
            } 
     
     
            ObjectParameter column_defaultParameter; 
     
            if (column_default != null) 
            { 
                column_defaultParameter = new ObjectParameter("column_default", column_default); 
            } 
            else 
            { 
                column_defaultParameter = new ObjectParameter("column_default", typeof(string)); 
            } 
     
     
            ObjectParameter isAddingParameter; 
     
            if (isAdding.HasValue) 
            { 
                isAddingParameter = new ObjectParameter("isAdding", isAdding); 
            } 
            else 
            { 
                isAddingParameter = new ObjectParameter("isAdding", typeof(bool)); 
            } 
     
     
            base.ExecuteFunction("AlterTable", table_nameParameter, column_nameParameter, column_descriptionParameter, column_defaultParameter, isAddingParameter); 
     
     
        } 
     
     
        public ObjectResult<Nullable<long>> GetUsersTree(Nullable<long> userId)     
     
        { 
     
     
            ObjectParameter userIdParameter; 
     
            if (userId.HasValue) 
            { 
                userIdParameter = new ObjectParameter("UserId", userId); 
            } 
            else 
            { 
                userIdParameter = new ObjectParameter("UserId", typeof(long)); 
            } 
     
     
            return base.ExecuteFunction<Nullable<long>>("GetUsersTree", userIdParameter); 
     
     
        } 
     
     
        public ObjectResult<string> GetValueByAT_ATA_A(Nullable<long> assetTypeID, Nullable<long> assetTypeAttributeID, Nullable<long> assetID)     
     
        { 
     
     
            ObjectParameter assetTypeIDParameter; 
     
            if (assetTypeID.HasValue) 
            { 
                assetTypeIDParameter = new ObjectParameter("AssetTypeID", assetTypeID); 
            } 
            else 
            { 
                assetTypeIDParameter = new ObjectParameter("AssetTypeID", typeof(long)); 
            } 
     
     
            ObjectParameter assetTypeAttributeIDParameter; 
     
            if (assetTypeAttributeID.HasValue) 
            { 
                assetTypeAttributeIDParameter = new ObjectParameter("AssetTypeAttributeID", assetTypeAttributeID); 
            } 
            else 
            { 
                assetTypeAttributeIDParameter = new ObjectParameter("AssetTypeAttributeID", typeof(long)); 
            } 
     
     
            ObjectParameter assetIDParameter; 
     
            if (assetID.HasValue) 
            { 
                assetIDParameter = new ObjectParameter("AssetID", assetID); 
            } 
            else 
            { 
                assetIDParameter = new ObjectParameter("AssetID", typeof(long)); 
            } 
     
     
            return base.ExecuteFunction<string>("GetValueByAT_ATA_A", assetTypeIDParameter, assetTypeAttributeIDParameter, assetIDParameter); 
     
     
        } 
     
     
        public void DropAssetTables()     
     
        { 
     
     
            base.ExecuteFunction("DropAssetTables"); 
     
     
        } 
     
     
        public ObjectResult<DynEntityIndex> GetPermittedAssets(Nullable<long> assetTypeId, Nullable<long> userId, Nullable<int> rowStart, Nullable<int> rowsNumber)     
     
        { 
     
     
            ObjectParameter assetTypeIdParameter; 
     
            if (assetTypeId.HasValue) 
            { 
                assetTypeIdParameter = new ObjectParameter("assetTypeId", assetTypeId); 
            } 
            else 
            { 
                assetTypeIdParameter = new ObjectParameter("assetTypeId", typeof(long)); 
            } 
     
     
            ObjectParameter userIdParameter; 
     
            if (userId.HasValue) 
            { 
                userIdParameter = new ObjectParameter("userId", userId); 
            } 
            else 
            { 
                userIdParameter = new ObjectParameter("userId", typeof(long)); 
            } 
     
     
            ObjectParameter rowStartParameter; 
     
            if (rowStart.HasValue) 
            { 
                rowStartParameter = new ObjectParameter("rowStart", rowStart); 
            } 
            else 
            { 
                rowStartParameter = new ObjectParameter("rowStart", typeof(int)); 
            } 
     
     
            ObjectParameter rowsNumberParameter; 
     
            if (rowsNumber.HasValue) 
            { 
                rowsNumberParameter = new ObjectParameter("rowsNumber", rowsNumber); 
            } 
            else 
            { 
                rowsNumberParameter = new ObjectParameter("rowsNumber", typeof(int)); 
            } 
     
     
            return base.ExecuteFunction<DynEntityIndex>("GetPermittedAssets", assetTypeIdParameter, userIdParameter, rowStartParameter, rowsNumberParameter); 
     
     
        } 
     
     
        public void DynEntityIndexRebuild()     
     
        { 
     
     
            base.ExecuteFunction("DynEntityIndexRebuild"); 
     
     
        } 
     
     
        public void IsValueUnique(string dynEntityTableName, string columnName, string value, Nullable<long> excludeDynEntityId, ObjectParameter result)     
     
        { 
     
     
            ObjectParameter dynEntityTableNameParameter; 
     
            if (dynEntityTableName != null) 
            { 
                dynEntityTableNameParameter = new ObjectParameter("DynEntityTableName", dynEntityTableName); 
            } 
            else 
            { 
                dynEntityTableNameParameter = new ObjectParameter("DynEntityTableName", typeof(string)); 
            } 
     
     
            ObjectParameter columnNameParameter; 
     
            if (columnName != null) 
            { 
                columnNameParameter = new ObjectParameter("columnName", columnName); 
            } 
            else 
            { 
                columnNameParameter = new ObjectParameter("columnName", typeof(string)); 
            } 
     
     
            ObjectParameter valueParameter; 
     
            if (value != null) 
            { 
                valueParameter = new ObjectParameter("value", value); 
            } 
            else 
            { 
                valueParameter = new ObjectParameter("value", typeof(string)); 
            } 
     
     
            ObjectParameter excludeDynEntityIdParameter; 
     
            if (excludeDynEntityId.HasValue) 
            { 
                excludeDynEntityIdParameter = new ObjectParameter("excludeDynEntityId", excludeDynEntityId); 
            } 
            else 
            { 
                excludeDynEntityIdParameter = new ObjectParameter("excludeDynEntityId", typeof(long)); 
            } 
     
     
            base.ExecuteFunction("IsValueUnique", dynEntityTableNameParameter, columnNameParameter, valueParameter, excludeDynEntityIdParameter, result); 
     
     
        } 
     
     
        public void FullTextSearch_IndexActiveDynEntities(string keywords)     
     
        { 
     
     
            ObjectParameter keywordsParameter; 
     
            if (keywords != null) 
            { 
                keywordsParameter = new ObjectParameter("keywords", keywords); 
            } 
            else 
            { 
                keywordsParameter = new ObjectParameter("keywords", typeof(string)); 
            } 
     
     
            base.ExecuteFunction("FullTextSearch_IndexActiveDynEntities", keywordsParameter); 
     
     
        } 
     
     
        public void FullTextSearch_IndexHistoryDynEntities(string keywords)     
     
        { 
     
     
            ObjectParameter keywordsParameter; 
     
            if (keywords != null) 
            { 
                keywordsParameter = new ObjectParameter("keywords", keywords); 
            } 
            else 
            { 
                keywordsParameter = new ObjectParameter("keywords", typeof(string)); 
            } 
     
     
            base.ExecuteFunction("FullTextSearch_IndexHistoryDynEntities", keywordsParameter); 
     
     
        } 
     
     
        public ObjectResult<Nullable<bool>> GetPermittedTask(Nullable<long> dynEntityConfigId, Nullable<long> userId, Nullable<long> taxonomyItemId)     
     
        { 
     
     
            ObjectParameter dynEntityConfigIdParameter; 
     
            if (dynEntityConfigId.HasValue) 
            { 
                dynEntityConfigIdParameter = new ObjectParameter("DynEntityConfigId", dynEntityConfigId); 
            } 
            else 
            { 
                dynEntityConfigIdParameter = new ObjectParameter("DynEntityConfigId", typeof(long)); 
            } 
     
     
            ObjectParameter userIdParameter; 
     
            if (userId.HasValue) 
            { 
                userIdParameter = new ObjectParameter("userId", userId); 
            } 
            else 
            { 
                userIdParameter = new ObjectParameter("userId", typeof(long)); 
            } 
     
     
            ObjectParameter taxonomyItemIdParameter; 
     
            if (taxonomyItemId.HasValue) 
            { 
                taxonomyItemIdParameter = new ObjectParameter("TaxonomyItemId", taxonomyItemId); 
            } 
            else 
            { 
                taxonomyItemIdParameter = new ObjectParameter("TaxonomyItemId", typeof(long)); 
            } 
     
     
            return base.ExecuteFunction<Nullable<bool>>("GetPermittedTask", dynEntityConfigIdParameter, userIdParameter, taxonomyItemIdParameter); 
     
     
        } 
     
     
        public ObjectResult<Nullable<int>> GetPermittedAssetsCount(Nullable<long> assetTypeId, Nullable<long> userId)     
     
        { 
     
     
            ObjectParameter assetTypeIdParameter; 
     
            if (assetTypeId.HasValue) 
            { 
                assetTypeIdParameter = new ObjectParameter("assetTypeId", assetTypeId); 
            } 
            else 
            { 
                assetTypeIdParameter = new ObjectParameter("assetTypeId", typeof(long)); 
            } 
     
     
            ObjectParameter userIdParameter; 
     
            if (userId.HasValue) 
            { 
                userIdParameter = new ObjectParameter("userId", userId); 
            } 
            else 
            { 
                userIdParameter = new ObjectParameter("userId", typeof(long)); 
            } 
     
     
            return base.ExecuteFunction<Nullable<int>>("GetPermittedAssetsCount", assetTypeIdParameter, userIdParameter); 
     
     
        } 
     
     
        public ObjectResult<f_cust_SearchByKeywords_Result> f_cust_SearchByKeywords(Nullable<System.Guid> searchId, Nullable<long> userId, string keywords, string configIds, string taxonomyItemsIds, Nullable<bool> active, Nullable<byte> orderby, Nullable<int> pageNumber, Nullable<int> pageSize, Nullable<long> attributeId, Nullable<long> assetId)     
     
        { 
     
     
            ObjectParameter searchIdParameter; 
     
            if (searchId.HasValue) 
            { 
                searchIdParameter = new ObjectParameter("SearchId", searchId); 
            } 
            else 
            { 
                searchIdParameter = new ObjectParameter("SearchId", typeof(System.Guid)); 
            } 
     
     
            ObjectParameter userIdParameter; 
     
            if (userId.HasValue) 
            { 
                userIdParameter = new ObjectParameter("UserId", userId); 
            } 
            else 
            { 
                userIdParameter = new ObjectParameter("UserId", typeof(long)); 
            } 
     
     
            ObjectParameter keywordsParameter; 
     
            if (keywords != null) 
            { 
                keywordsParameter = new ObjectParameter("keywords", keywords); 
            } 
            else 
            { 
                keywordsParameter = new ObjectParameter("keywords", typeof(string)); 
            } 
     
     
            ObjectParameter configIdsParameter; 
     
            if (configIds != null) 
            { 
                configIdsParameter = new ObjectParameter("ConfigIds", configIds); 
            } 
            else 
            { 
                configIdsParameter = new ObjectParameter("ConfigIds", typeof(string)); 
            } 
     
     
            ObjectParameter taxonomyItemsIdsParameter; 
     
            if (taxonomyItemsIds != null) 
            { 
                taxonomyItemsIdsParameter = new ObjectParameter("taxonomyItemsIds", taxonomyItemsIds); 
            } 
            else 
            { 
                taxonomyItemsIdsParameter = new ObjectParameter("taxonomyItemsIds", typeof(string)); 
            } 
     
     
            ObjectParameter activeParameter; 
     
            if (active.HasValue) 
            { 
                activeParameter = new ObjectParameter("active", active); 
            } 
            else 
            { 
                activeParameter = new ObjectParameter("active", typeof(bool)); 
            } 
     
     
            ObjectParameter orderbyParameter; 
     
            if (orderby.HasValue) 
            { 
                orderbyParameter = new ObjectParameter("orderby", orderby); 
            } 
            else 
            { 
                orderbyParameter = new ObjectParameter("orderby", typeof(byte)); 
            } 
     
     
            ObjectParameter pageNumberParameter; 
     
            if (pageNumber.HasValue) 
            { 
                pageNumberParameter = new ObjectParameter("PageNumber", pageNumber); 
            } 
            else 
            { 
                pageNumberParameter = new ObjectParameter("PageNumber", typeof(int)); 
            } 
     
     
            ObjectParameter pageSizeParameter; 
     
            if (pageSize.HasValue) 
            { 
                pageSizeParameter = new ObjectParameter("PageSize", pageSize); 
            } 
            else 
            { 
                pageSizeParameter = new ObjectParameter("PageSize", typeof(int)); 
            } 
     
     
            ObjectParameter attributeIdParameter; 
     
            if (attributeId.HasValue) 
            { 
                attributeIdParameter = new ObjectParameter("attributeId", attributeId); 
            } 
            else 
            { 
                attributeIdParameter = new ObjectParameter("attributeId", typeof(long)); 
            } 
     
     
            ObjectParameter assetIdParameter; 
     
            if (assetId.HasValue) 
            { 
                assetIdParameter = new ObjectParameter("assetId", assetId); 
            } 
            else 
            { 
                assetIdParameter = new ObjectParameter("assetId", typeof(long)); 
            } 
     
     
            return base.ExecuteFunction<f_cust_SearchByKeywords_Result>("f_cust_SearchByKeywords", searchIdParameter, userIdParameter, keywordsParameter, configIdsParameter, taxonomyItemsIdsParameter, activeParameter, orderbyParameter, pageNumberParameter, pageSizeParameter, attributeIdParameter, assetIdParameter); 
     
     
        } 
     
     
        public ObjectResult<StockLocationInfo> GetStocksByLocation(Nullable<long> assetid, Nullable<long> configid)     
     
        { 
     
     
            ObjectParameter assetidParameter; 
     
            if (assetid.HasValue) 
            { 
                assetidParameter = new ObjectParameter("assetid", assetid); 
            } 
            else 
            { 
                assetidParameter = new ObjectParameter("assetid", typeof(long)); 
            } 
     
     
            ObjectParameter configidParameter; 
     
            if (configid.HasValue) 
            { 
                configidParameter = new ObjectParameter("configid", configid); 
            } 
            else 
            { 
                configidParameter = new ObjectParameter("configid", typeof(long)); 
            } 
     
     
            return base.ExecuteFunction<StockLocationInfo>("GetStocksByLocation", assetidParameter, configidParameter); 
     
     
        } 
     
     
        public ObjectResult<f_cust_SearchByTypeContext_Result> f_cust_SearchByTypeContext(Nullable<System.Guid> searchId, Nullable<long> userId, string configIds, string taxonomyItemsIds, Nullable<bool> active, Nullable<byte> orderby, Nullable<int> pageNumber, Nullable<int> pageSize)     
     
        { 
     
     
            ObjectParameter searchIdParameter; 
     
            if (searchId.HasValue) 
            { 
                searchIdParameter = new ObjectParameter("SearchId", searchId); 
            } 
            else 
            { 
                searchIdParameter = new ObjectParameter("SearchId", typeof(System.Guid)); 
            } 
     
     
            ObjectParameter userIdParameter; 
     
            if (userId.HasValue) 
            { 
                userIdParameter = new ObjectParameter("UserId", userId); 
            } 
            else 
            { 
                userIdParameter = new ObjectParameter("UserId", typeof(long)); 
            } 
     
     
            ObjectParameter configIdsParameter; 
     
            if (configIds != null) 
            { 
                configIdsParameter = new ObjectParameter("ConfigIds", configIds); 
            } 
            else 
            { 
                configIdsParameter = new ObjectParameter("ConfigIds", typeof(string)); 
            } 
     
     
            ObjectParameter taxonomyItemsIdsParameter; 
     
            if (taxonomyItemsIds != null) 
            { 
                taxonomyItemsIdsParameter = new ObjectParameter("taxonomyItemsIds", taxonomyItemsIds); 
            } 
            else 
            { 
                taxonomyItemsIdsParameter = new ObjectParameter("taxonomyItemsIds", typeof(string)); 
            } 
     
     
            ObjectParameter activeParameter; 
     
            if (active.HasValue) 
            { 
                activeParameter = new ObjectParameter("active", active); 
            } 
            else 
            { 
                activeParameter = new ObjectParameter("active", typeof(bool)); 
            } 
     
     
            ObjectParameter orderbyParameter; 
     
            if (orderby.HasValue) 
            { 
                orderbyParameter = new ObjectParameter("orderby", orderby); 
            } 
            else 
            { 
                orderbyParameter = new ObjectParameter("orderby", typeof(byte)); 
            } 
     
     
            ObjectParameter pageNumberParameter; 
     
            if (pageNumber.HasValue) 
            { 
                pageNumberParameter = new ObjectParameter("PageNumber", pageNumber); 
            } 
            else 
            { 
                pageNumberParameter = new ObjectParameter("PageNumber", typeof(int)); 
            } 
     
     
            ObjectParameter pageSizeParameter; 
     
            if (pageSize.HasValue) 
            { 
                pageSizeParameter = new ObjectParameter("PageSize", pageSize); 
            } 
            else 
            { 
                pageSizeParameter = new ObjectParameter("PageSize", typeof(int)); 
            } 
     
     
            return base.ExecuteFunction<f_cust_SearchByTypeContext_Result>("f_cust_SearchByTypeContext", searchIdParameter, userIdParameter, configIdsParameter, taxonomyItemsIdsParameter, activeParameter, orderbyParameter, pageNumberParameter, pageSizeParameter); 
     
     
        } 
     
     
        public ObjectResult<f_cust_GetSrchCount_Result> f_cust_GetSrchCount(Nullable<System.Guid> searchId, Nullable<long> userId, string keywords, string configIds, string taxonomyItemsIds, Nullable<bool> active, Nullable<bool> type)     
     
        { 
     
     
            ObjectParameter searchIdParameter; 
     
            if (searchId.HasValue) 
            { 
                searchIdParameter = new ObjectParameter("SearchId", searchId); 
            } 
            else 
            { 
                searchIdParameter = new ObjectParameter("SearchId", typeof(System.Guid)); 
            } 
     
     
            ObjectParameter userIdParameter; 
     
            if (userId.HasValue) 
            { 
                userIdParameter = new ObjectParameter("UserId", userId); 
            } 
            else 
            { 
                userIdParameter = new ObjectParameter("UserId", typeof(long)); 
            } 
     
     
            ObjectParameter keywordsParameter; 
     
            if (keywords != null) 
            { 
                keywordsParameter = new ObjectParameter("keywords", keywords); 
            } 
            else 
            { 
                keywordsParameter = new ObjectParameter("keywords", typeof(string)); 
            } 
     
     
            ObjectParameter configIdsParameter; 
     
            if (configIds != null) 
            { 
                configIdsParameter = new ObjectParameter("ConfigIds", configIds); 
            } 
            else 
            { 
                configIdsParameter = new ObjectParameter("ConfigIds", typeof(string)); 
            } 
     
     
            ObjectParameter taxonomyItemsIdsParameter; 
     
            if (taxonomyItemsIds != null) 
            { 
                taxonomyItemsIdsParameter = new ObjectParameter("taxonomyItemsIds", taxonomyItemsIds); 
            } 
            else 
            { 
                taxonomyItemsIdsParameter = new ObjectParameter("taxonomyItemsIds", typeof(string)); 
            } 
     
     
            ObjectParameter activeParameter; 
     
            if (active.HasValue) 
            { 
                activeParameter = new ObjectParameter("active", active); 
            } 
            else 
            { 
                activeParameter = new ObjectParameter("active", typeof(bool)); 
            } 
     
     
            ObjectParameter typeParameter; 
     
            if (type.HasValue) 
            { 
                typeParameter = new ObjectParameter("type", type); 
            } 
            else 
            { 
                typeParameter = new ObjectParameter("type", typeof(bool)); 
            } 
     
     
            return base.ExecuteFunction<f_cust_GetSrchCount_Result>("f_cust_GetSrchCount", searchIdParameter, userIdParameter, keywordsParameter, configIdsParameter, taxonomyItemsIdsParameter, activeParameter, typeParameter); 
     
     
        } 
     
     
        public ObjectResult<f_cust_GetChildAssets_Result> f_cust_GetChildAssets(Nullable<long> assetTypeId)     
     
        { 
     
     
            ObjectParameter assetTypeIdParameter; 
     
            if (assetTypeId.HasValue) 
            { 
                assetTypeIdParameter = new ObjectParameter("assetTypeId", assetTypeId); 
            } 
            else 
            { 
                assetTypeIdParameter = new ObjectParameter("assetTypeId", typeof(long)); 
            } 
     
     
            return base.ExecuteFunction<f_cust_GetChildAssets_Result>("f_cust_GetChildAssets", assetTypeIdParameter); 
     
     
        } 
     
     
        public ObjectResult<StockLocationInfo> f_cust_GetStocksByLocation(Nullable<long> assetid, Nullable<long> configid)     
     
        { 
     
     
            ObjectParameter assetidParameter; 
     
            if (assetid.HasValue) 
            { 
                assetidParameter = new ObjectParameter("assetid", assetid); 
            } 
            else 
            { 
                assetidParameter = new ObjectParameter("assetid", typeof(long)); 
            } 
     
     
            ObjectParameter configidParameter; 
     
            if (configid.HasValue) 
            { 
                configidParameter = new ObjectParameter("configid", configid); 
            } 
            else 
            { 
                configidParameter = new ObjectParameter("configid", typeof(long)); 
            } 
     
     
            return base.ExecuteFunction<StockLocationInfo>("f_cust_GetStocksByLocation", assetidParameter, configidParameter); 
     
     
        } 
     
     
        public void RestoreDeletedItem(Nullable<long> dynEntityId, Nullable<long> dynEntityConfigId)     
     
        { 
     
     
            ObjectParameter dynEntityIdParameter; 
     
            if (dynEntityId.HasValue) 
            { 
                dynEntityIdParameter = new ObjectParameter("DynEntityId", dynEntityId); 
            } 
            else 
            { 
                dynEntityIdParameter = new ObjectParameter("DynEntityId", typeof(long)); 
            } 
     
     
            ObjectParameter dynEntityConfigIdParameter; 
     
            if (dynEntityConfigId.HasValue) 
            { 
                dynEntityConfigIdParameter = new ObjectParameter("DynEntityConfigId", dynEntityConfigId); 
            } 
            else 
            { 
                dynEntityConfigIdParameter = new ObjectParameter("DynEntityConfigId", typeof(long)); 
            } 
     
     
            base.ExecuteFunction("RestoreDeletedItem", dynEntityIdParameter, dynEntityConfigIdParameter); 
     
     
        } 
     
     
        public void f_cust_RebuildTriggers(Nullable<long> dynEntityConfigUid)     
     
        { 
     
     
            ObjectParameter dynEntityConfigUidParameter; 
     
            if (dynEntityConfigUid.HasValue) 
            { 
                dynEntityConfigUidParameter = new ObjectParameter("dynEntityConfigUid", dynEntityConfigUid); 
            } 
            else 
            { 
                dynEntityConfigUidParameter = new ObjectParameter("dynEntityConfigUid", typeof(long)); 
            } 
     
     
            base.ExecuteFunction("f_cust_RebuildTriggers", dynEntityConfigUidParameter); 
     
     
        } 
     
     
        public ObjectResult<f_cust_GetSqlServerAgentJobs_Result> GetSqlServerAgentJobs()     
     
        { 
     
     
            return base.ExecuteFunction<f_cust_GetSqlServerAgentJobs_Result>("GetSqlServerAgentJobs"); 
     
     
        } 
     
     
        public ObjectResult<f_cust_GetReports_Result> f_cust_GetReports()     
     
        { 
     
     
            return base.ExecuteFunction<f_cust_GetReports_Result>("f_cust_GetReports"); 
     
     
        } 
     
     
        public ObjectResult<ActiveTask> f_cust_GetTasks(Nullable<long> userId)     
     
        { 
     
     
            ObjectParameter userIdParameter; 
     
            if (userId.HasValue) 
            { 
                userIdParameter = new ObjectParameter("UserId", userId); 
            } 
            else 
            { 
                userIdParameter = new ObjectParameter("UserId", typeof(long)); 
            } 
     
     
            return base.ExecuteFunction<ActiveTask>("f_cust_GetTasks", userIdParameter); 
     
     
        } 

        #endregion

    }
}
