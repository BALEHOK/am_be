using System;
using System.Linq;
using AppFramework.ConstantsEnumerators;
using AppFramework.Core.Classes;
using AppFramework.Core.ConstantsEnumerators;
using AppFramework.DataProxy;
using Common.Logging;

namespace AppFramework.Core.Validation
{
    public interface IValidationServiceNew
    {
        ValidationResult ValidateAttribute(AssetAttribute attribute);
        ValidationResult ValidateAsset(Asset asset);
    }

    public class ValidationServiceNew : IValidationServiceNew
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly ILog _logger;

        public ValidationServiceNew(IUnitOfWork unitOfWork, ILog logger)
        {
            if (unitOfWork == null)
                throw new ArgumentNullException("unitOfWork");
            if (logger == null)
                throw new ArgumentNullException("logger");
            _unitOfWork = unitOfWork;
            _logger = logger;
        }

        public ValidationResult ValidateAttribute(AssetAttribute attribute)
        {
            var result = ValidationResult.Success;

            if (_isEmpty(attribute))
            {
                if (attribute.Configuration.IsRequired &&
                    !_isAutoGenerated(attribute))
                {
                    result +=
                        ValidationResultLine.Error(
                            attribute.Configuration.ID.ToString(),
                            "Required field cannot be empty");
                }
                return result;
            }


            var validationFunctions = new ValidationFunctions(_unitOfWork, attribute);

            // check data type
            if (result.IsValid &&
                attribute.Configuration.DataTypeEnum != Enumerators.DataType.Asset &&
                attribute.Configuration.DataTypeEnum != Enumerators.DataType.Assets &&
                attribute.Configuration.DataTypeEnum != Enumerators.DataType.DynList &&
                attribute.Configuration.DataTypeEnum != Enumerators.DataType.DynLists)
            {
                var dataTypeValidator = new DataTypeValidator(validationFunctions);
                result += dataTypeValidator.Validate(attribute);
            }

            // validate expression if exists            
            if (result.IsValid)
            {
                var attributeValidator = new AttributeValidator(validationFunctions);
                result += attributeValidator.Validate(attribute);
            }

            var validationExpression = attribute.Configuration.ValidationExpr;
            if (!result.IsValid && result.ResultLines.Count == 0 && !string.IsNullOrEmpty(validationExpression))
            {
                var displayExpr = validationExpression.Replace("@value", attribute.Configuration.Name);
                result +=
                    ValidationResultLine.Error(
                        attribute.Configuration.ID.ToString(),
                        string.Format("Validation expression failed: {0}", displayExpr));
            }

            if (!result.IsValid)
            {
                _logger.DebugFormat(
                    "validation failed: {0}",
                    string.Join("; ", result.ResultLines.Select(l => l.Message)));
            }

            return result;
        }

        public ValidationResult ValidateAsset(Asset asset)
        {
            var result = new ValidationResult();
            foreach (var attribute in asset.Attributes)
            {
                result += ValidateAttribute(attribute);
            }
            return result;
        }

        private bool _isEmpty(AssetAttribute attribute)
        {
            bool isEmpty;
            switch (attribute.Configuration.DataTypeEnum)
            {
                case Enumerators.DataType.Asset:
                    isEmpty = !attribute.ValueAsId.HasValue
                              || attribute.ValueAsId == 0;
                    break;

                case Enumerators.DataType.DynList:
                    isEmpty = !attribute.DynamicListValues.Any();
                    break;

                default:
                    isEmpty = string.IsNullOrEmpty(attribute.Value);
                    break;
            }
            return isEmpty;
        }

        private bool _isAutoGenerated(AssetAttribute attribute)
        {
            return
                attribute.ParentAsset != null &&
                attribute.ParentAsset.Configuration.AutoGenerateNameType !=
                Enumerators.TypeAutoGenerateName.None &&
                attribute.Configuration.DBTableFieldName == AttributeNames.Name;
        }
    }
}