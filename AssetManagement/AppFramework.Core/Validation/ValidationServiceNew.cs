using System;
using System.Linq;
using AppFramework.ConstantsEnumerators;
using AppFramework.Core.Classes;
using AppFramework.Core.DataTypes;
using AppFramework.Core.Helpers;
using AppFramework.DataProxy;
using System.Diagnostics;
using Common.Logging;
using AppFramework.Core.ConstantsEnumerators;

namespace AppFramework.Core.Validation
{
    public interface IValidationServiceNew
    {
        ValidationResult ValidateDataType(string attributeName, DataTypeBase dataType, object value);
        ValidationResult ValidateAttribute(AssetAttribute attribute, long currentUserId);
        ValidationResult ValidateAsset(Asset asset, long currentUserId);
    }

    public class ValidationServiceNew : IValidationServiceNew
    {
        private readonly AttributeValidator _attributeValidator;
        private readonly ValidationFunctions _validationFunctions;
        private readonly ILog _logger;

        public ValidationServiceNew(IUnitOfWork unitOfWork, ILog logger)
        {
            if (unitOfWork == null)
                throw new ArgumentNullException("unitOfWork");
            if (logger == null)
                throw new ArgumentNullException("logger");
            _logger = logger;

            _validationFunctions = new ValidationFunctions(unitOfWork);
            _attributeValidator = new AttributeValidator(_validationFunctions);
        }

        public ValidationResult ValidateDataType(string attributeName, DataTypeBase dataType, object value)
        {
            var result = ValidationResult.Success;

            if (value == null)
                return result;

            var isValidType = true;
            try
            {
                TypesHelper.GetTypedValue(dataType.FrameworkDataType, value);
            }
            catch (FormatException)
            {
                isValidType = false;
            }
            catch (InvalidCastException)
            {
                isValidType = false;
            }
            catch (OverflowException)
            {                
                result += ValidationResultLine.Error(attributeName, "Value exceeds maximum for this type");
                return result;
            }

            var dataTypeValidationExpression = dataType.Base.ValidationExpr;            
            if (!string.IsNullOrEmpty(dataTypeValidationExpression))
            {
                if (dataTypeValidationExpression.StartsWith("@"))
                {
                    result +=
                        ValidationResultLine.Error(
                            attributeName,
                            string.Format("Validation expression for '{0}' data type should be updated",
                                dataType.Name));
                    return result;
                }

                var evaluator = new ValidationExpressionEvaluator(dataTypeValidationExpression, _validationFunctions,
                    result);
                evaluator.Expression.EvaluateParameter += (name, args) =>
                {
                    if (name.Equals("@value"))
                        args.Result = TypesHelper.GetTypedValue(dataType.FrameworkDataType, value);
                };
                if (!evaluator.Evaluate())
                    result += ValidationResultLine.Error(attributeName, dataType.Base.ValidationMessage);
            }

            if (!isValidType)
            {
                result +=
                    ValidationResultLine.Error(
                        attributeName,
                        string.Format("Validation failed: value '{0}' is not valid ", value));
            }

            return result;
        }

        public ValidationResult ValidateAttribute(AssetAttribute attribute, long currentUserId)
        {
            var result = ValidationResult.Success;

            if (_isEmpty(attribute))
            {
                if (attribute.Configuration.IsRequired &&
                    !_isAutoGenerated(attribute))
                {
                    result +=
                        ValidationResultLine.Error(
                            attribute.Configuration.ID.ToString(),
                            "Required field cannot be empty");
                }
                return result;
            }

            // check data type
            if (result.IsValid &&
                attribute.Configuration.DataTypeEnum != Enumerators.DataType.Asset &&
                attribute.Configuration.DataTypeEnum != Enumerators.DataType.Assets &&
                attribute.Configuration.DataTypeEnum != Enumerators.DataType.DynList &&
                attribute.Configuration.DataTypeEnum != Enumerators.DataType.DynLists)
            {
                result += ValidateDataType(
                    attribute.Configuration.ID.ToString(), 
                    attribute.Data.DataType, 
                    attribute.Data.Value);
            }

            // validate expression if exists            
            if (result.IsValid)
            {
                result += _attributeValidator.Validate(attribute, attribute.Data.Value);
            }

            var validationExpression = attribute.Configuration.ValidationExpr;
            if (!result.IsValid && result.ResultLines.Count == 0 && !string.IsNullOrEmpty(validationExpression))
            {
                var displayExpr = validationExpression.Replace("@value", attribute.Configuration.Name);
                result +=
                    ValidationResultLine.Error(
                        attribute.Configuration.ID.ToString(),
                        string.Format("Validation expression failed: {0}", displayExpr));
            }

            if (!result.IsValid)
            {
                _logger.DebugFormat(
                    "validation failed: {0}",
                    string.Join("; ", result.ResultLines.Select(l => l.Message)));
            }

            return result;
        }       

        public ValidationResult ValidateAsset(Asset asset, long currentUserId)
        {
            var result = new ValidationResult();
            foreach (var attribute in asset.Attributes)
            {
                result += ValidateAttribute(attribute, currentUserId);
            }
            return result;
        }

        private bool _isEmpty(AssetAttribute attribute)
        {
            bool isEmpty = false;
            switch(attribute.Configuration.DataTypeEnum)
            {
                case Enumerators.DataType.Asset:
                    isEmpty = !attribute.ValueAsId.HasValue 
                        || attribute.ValueAsId == 0;
                    break;

                case Enumerators.DataType.DynList:
                    isEmpty = !attribute.DynamicListValues.Any();
                    break;

                default:
                    isEmpty = string.IsNullOrEmpty(attribute.Value);
                    break;
            }
            return isEmpty;
        }

        private bool _isAutoGenerated(AssetAttribute attribute)
        {
            return 
                attribute.ParentAsset != null &&
                attribute.ParentAsset.Configuration.AutoGenerateNameType !=
                    Enumerators.TypeAutoGenerateName.None &&
                attribute.Configuration.DBTableFieldName == AttributeNames.Name;
        }
    }
}